/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

@objc public enum Theme: Int {
	case light

	public var stylesheet: GenericStyle {
		switch self {
		case .light: return LightStyle.shared()
		}
	}
}

fileprivate var __ThemeHandle: UInt8 = 0

public extension StylesheetManager {
	static func currentTheme() -> GenericStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "Stardust.theme"
	}

	 var theme: Theme {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeHandle) as? Theme else { return .light }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	func themeInit() {
		let theme: Theme = UserDefaults.standard[DefaultKeys.theme] ?? .light
		objc_setAssociatedObject(self, &__ThemeHandle, theme, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
	}
}

/// Entry point for the app stylesheet
@objc(STRLightStyle) @objcMembers public class LightStyle: GenericStyle {

	public override class func shared() -> LightStyle {
		 struct __ { static let _sharedInstance = LightStyle() }
		return __._sharedInstance
	}
	//MARK: - LightStyleColor
	override open func ColorStyle() -> GenericStyle.ColorAppearanceProxy {
		if let override = _Color { return override }
			return LightStyleColorAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleColorAppearanceProxy) @objcMembers open class LightStyleColorAppearanceProxy: GenericStyle.ColorAppearanceProxy {
	}
	//MARK: - LightStyleEmptyListView
	override open func EmptyListViewStyle() -> GenericStyle.EmptyListViewAppearanceProxy {
		if let override = _EmptyListView { return override }
			return LightStyleEmptyListViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleEmptyListViewAppearanceProxy) @objcMembers open class LightStyleEmptyListViewAppearanceProxy: GenericStyle.EmptyListViewAppearanceProxy {

		//MARK: - LightStylecolorEmptyListView
		override open func colorStyle() -> GenericStyle.EmptyListViewAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorEmptyListViewAppearanceProxy(proxy: mainProxy)
			}
		@objc(LightStyleEmptyListViewColorAppearanceProxy) @objcMembers open class LightStylecolorEmptyListViewAppearanceProxy: GenericStyle.EmptyListViewAppearanceProxy.colorAppearanceProxy {
		}

	}
	//MARK: - LightStyleIconDefaults
	override open func IconDefaultsStyle() -> GenericStyle.IconDefaultsAppearanceProxy {
		if let override = _IconDefaults { return override }
			return LightStyleIconDefaultsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleIconDefaultsAppearanceProxy) @objcMembers open class LightStyleIconDefaultsAppearanceProxy: GenericStyle.IconDefaultsAppearanceProxy {
	}
	//MARK: - LightStyleIconEnums
	override open func IconEnumsStyle() -> GenericStyle.IconEnumsAppearanceProxy {
		if let override = _IconEnums { return override }
			return LightStyleIconEnumsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleIconEnumsAppearanceProxy) @objcMembers open class LightStyleIconEnumsAppearanceProxy: GenericStyle.IconEnumsAppearanceProxy {
	}
	//MARK: - LightStyleIconMappings
	override open func IconMappingsStyle() -> GenericStyle.IconMappingsAppearanceProxy {
		if let override = _IconMappings { return override }
			return LightStyleIconMappingsAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleIconMappingsAppearanceProxy) @objcMembers open class LightStyleIconMappingsAppearanceProxy: GenericStyle.IconMappingsAppearanceProxy {

		//MARK: - LightStylesizeIconMappings
		override open func sizeStyle() -> GenericStyle.IconMappingsAppearanceProxy.sizeAppearanceProxy {
			if let override = _size { return override }
				return LightStylesizeIconMappingsAppearanceProxy(proxy: mainProxy)
			}
		@objc(LightStyleIconMappingsSizeAppearanceProxy) @objcMembers open class LightStylesizeIconMappingsAppearanceProxy: GenericStyle.IconMappingsAppearanceProxy.sizeAppearanceProxy {
		}

	}
	//MARK: - LightStyleInnerEmptyListView
	override open func InnerEmptyListViewStyle() -> GenericStyle.InnerEmptyListViewAppearanceProxy {
		if let override = _InnerEmptyListView { return override }
			return LightStyleInnerEmptyListViewAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyleInnerEmptyListViewAppearanceProxy) @objcMembers open class LightStyleInnerEmptyListViewAppearanceProxy: GenericStyle.InnerEmptyListViewAppearanceProxy {

		//MARK: - LightStylecolorInnerEmptyListView
		override open func colorStyle() -> GenericStyle.InnerEmptyListViewAppearanceProxy.colorAppearanceProxy {
			if let override = _color { return override }
				return LightStylecolorInnerEmptyListViewAppearanceProxy(proxy: mainProxy)
			}
		@objc(LightStyleInnerEmptyListViewColorAppearanceProxy) @objcMembers open class LightStylecolorInnerEmptyListViewAppearanceProxy: GenericStyle.InnerEmptyListViewAppearanceProxy.InnerEmptyListViewcolorAppearanceProxy {
		}

	}
	//MARK: - Theme
	@objc(ThemeAppearanceProxy) @objcMembers public static let Theme = ThemeAppearanceProxy()
	@objc(ThemeAppearanceProxy) @objcMembers open class ThemeAppearanceProxy: NSObject {
		public let mainProxy: () -> GenericStyle
		public init(proxy: @escaping () -> GenericStyle) {
			self.mainProxy = proxy
		}

		//MARK: light 
		public var _light: Bool?
		open func lightProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _light { return override }
			return true
			}
		public var light: Bool {
			get { return self.lightProperty() }
			set { _light = newValue }
		}
	}
	//MARK: - LightStyle__TextStyle
	override open func __TextStyleStyle() -> GenericStyle.__TextStyleAppearanceProxy {
		if let override = ___TextStyle { return override }
			return LightStyle__TextStyleAppearanceProxy(proxy: { return LightStyle.shared() })
		}
	@objc(LightStyle__TextStyleAppearanceProxy) @objcMembers open class LightStyle__TextStyleAppearanceProxy: GenericStyle.__TextStyleAppearanceProxy {
	}

}