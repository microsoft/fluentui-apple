/// Autogenerated file

// swiftlint:disable all
import UIKit

/// Entry point for the app stylesheet
@objc extension GenericStyle {

	//MARK: - EmptyListView
	@objc(EmptyListViewAppearanceProxy) @objcMembers open class EmptyListViewAppearanceProxy: NSObject {
		public let mainProxy: () -> GenericStyle
		public init(proxy: @escaping () -> GenericStyle) {
			self.mainProxy = proxy
		}

		//MARK: - color
		public var _color: colorAppearanceProxy?
		open func colorStyle() -> colorAppearanceProxy {
			if let override = _color { return override }
				return colorAppearanceProxy(proxy: mainProxy)
			}
		public var color: colorAppearanceProxy {
			get { return self.colorStyle() }
			set { _color = newValue }
		}
		@objc(EmptyListViewColorAppearanceProxy) @objcMembers open class colorAppearanceProxy: NSObject {
			public let mainProxy: () -> GenericStyle
			public init(proxy: @escaping () -> GenericStyle) {
				self.mainProxy = proxy
			}

			//MARK: normal 
			public var _normal: UIColor?
			open func normalProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _normal { return override }
					return mainProxy().Color.testProperty(traitCollection)
				}
			public var normal: UIColor {
				get { return self.normalProperty() }
				set { _normal = newValue }
			}
		}

	}

}
fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension EmptyListView: AppearaceProxyComponent {

	public typealias ApperanceProxyType = GenericStyle.EmptyListViewAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("Stardust") == false {
					return proxy
				}

				if proxy is GenericStyle.InnerEmptyListViewAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).InnerEmptyListView
				}
				return proxy
			}

			return StylesheetManager.stylesheet(GenericStyle.shared()).EmptyListView
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
