// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
extension FluentUIStyle {

	// MARK: - MSFActivityIndicatorTokens
	open var MSFActivityIndicatorTokens: MSFActivityIndicatorTokensAppearanceProxy {
		return MSFActivityIndicatorTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFActivityIndicatorTokensAppearanceProxy {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		// MARK: - defaultColor 
		open var defaultColor: UIColor {
			return mainProxy().Colors.Foreground.neutral4
		}

		// MARK: - size
		open var size: sizeAppearanceProxy {
			return sizeAppearanceProxy(proxy: mainProxy)
		}
		open class sizeAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return CGFloat(32.0)
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return CGFloat(24.0)
			}

			// MARK: - small 
			open var small: CGFloat {
				return CGFloat(16.0)
			}

			// MARK: - xLarge 
			open var xLarge: CGFloat {
				return CGFloat(36.0)
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return CGFloat(12.0)
			}
		}


		// MARK: - thickness
		open var thickness: thicknessAppearanceProxy {
			return thicknessAppearanceProxy(proxy: mainProxy)
		}
		open class thicknessAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return CGFloat(3.0)
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return CGFloat(2.0)
			}

			// MARK: - small 
			open var small: CGFloat {
				return CGFloat(1.0)
			}

			// MARK: - xLarge 
			open var xLarge: CGFloat {
				return CGFloat(4.0)
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return CGFloat(1.0)
			}
		}

	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFActivityIndicatorTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFActivityIndicatorTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFActivityIndicatorTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
