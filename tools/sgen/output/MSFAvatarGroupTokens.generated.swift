// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
extension FluentUIStyle {

	// MARK: - MSFAvatarGroupStackTokens
	open var MSFAvatarGroupStackTokens: MSFAvatarGroupStackTokensAppearanceProxy {
		return MSFAvatarGroupStackTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFAvatarGroupStackTokensAppearanceProxy: MSFAvatarGroupTokensAppearanceProxy {

		// MARK: - MSFAvatarGroupStackTokensinterspace
		open override var interspace: MSFAvatarGroupStackTokensinterspaceAppearanceProxy {
			return MSFAvatarGroupStackTokensinterspaceAppearanceProxy(proxy: mainProxy)
		}
		open class MSFAvatarGroupStackTokensinterspaceAppearanceProxy: MSFAvatarGroupTokensAppearanceProxy.interspaceAppearanceProxy {

			// MARK: - large 
			open override var large: CGFloat {
				return CGFloat(-8.0)
			}

			// MARK: - medium 
			open override var medium: CGFloat {
				return CGFloat(-4.0)
			}

			// MARK: - small 
			open override var small: CGFloat {
				return CGFloat(-2.0)
			}

			// MARK: - xSmall 
			open override var xSmall: CGFloat {
				return CGFloat(-2.0)
			}

			// MARK: - xlarge 
			open override var xlarge: CGFloat {
				return CGFloat(-12.0)
			}

			// MARK: - xxlarge 
			open override var xxlarge: CGFloat {
				return CGFloat(-12.0)
			}
		}

	}
	// MARK: - MSFAvatarGroupTokens
	open var MSFAvatarGroupTokens: MSFAvatarGroupTokensAppearanceProxy {
		return MSFAvatarGroupTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFAvatarGroupTokensAppearanceProxy {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		// MARK: - interspace
		open var interspace: interspaceAppearanceProxy {
			return interspaceAppearanceProxy(proxy: mainProxy)
		}
		open class interspaceAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Spacing.xSmall
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Spacing.xSmall
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Spacing.xxSmall
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Spacing.xxSmall
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Spacing.xSmall
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Spacing.xSmall
			}
		}

	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFAvatarGroupTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFAvatarGroupTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("FluentUI") == false {
					return proxy
				}

				if proxy is FluentUIStyle.MSFAvatarGroupStackTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAvatarGroupStackTokens
				}
				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAvatarGroupTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
