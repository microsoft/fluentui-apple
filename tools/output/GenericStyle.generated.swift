/// Autogenerated file

// swiftlint:disable all
import UIKit

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
	associatedtype ApperanceProxyType
	var appearanceProxy: ApperanceProxyType { get }
	var themeAware: Bool { get set }
	func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
	func initAppearanceProxy(themeAware: Bool = true) {
		self.themeAware = themeAware
		didChangeAppearanceProxy()
	}
}

private extension S.FontTextStyle {
	var style: UIFont.TextStyle? {
		switch self {
		}
	}
	var defaultPointSize: CGFloat {
		switch self {
		}
	}
	var maximumPointSize: CGFloat? {
		switch self {
		}
	}
}

private let defaultSizes: [UIFont.TextStyle: CGFloat] = {
	var sizes: [UIFont.TextStyle: CGFloat] = [.caption2: 11,
	.caption1: 12,
	.footnote: 13,
	.subheadline: 15,
	.callout: 16,
	.body: 17,
	.headline: 17,
	.title3: 20,
	.title2: 22,
	.title1: 28]
	if #available(iOS 11.0, *) {
		sizes[.largeTitle] = 34
	}
	return sizes
}()

fileprivate class StardustFontResponsibleCache: NSObject {
	private lazy var cache = [UIFont.FontType: UIFont]()
	override init() {
		super.init()
		NotificationCenter.default.addObserver(self, selector: #selector(handleApplicationDidReceiveMemoryWarning), name: UIApplication.didReceiveMemoryWarningNotification, object: nil)
	}
	open func clearCache() {
		cache.removeAll()
	}
	@objc private func handleApplicationDidReceiveMemoryWarning() {
		clearCache()
	}
	func font(name: String? = nil, size: CGFloat? = nil, textStyle: S.FontTextStyle? = nil, weight: UIFont.Weight? = nil, traits: UIFontDescriptor.SymbolicTraits, traitCollection: UITraitCollection? = nil, isScalable: Bool = true) -> UIFont {
		let key = UIFont.FontType(name: name, size: size, textStyle: textStyle, weight: weight, traits: traits, traitCollection: traitCollection, isScalable: isScalable)
		if let font = cache[key] {
			return font
		} else {
			var font: UIFont!
			var isAlreadyScalable: Bool = false
			if let name = name, size != nil || textStyle != nil {
				if let size = size, let customFont = UIFont(name: name, size: size) {
					font = customFont
				} else if let textStyle = textStyle, let nativeTextStyle = textStyle.style {
					if #available(iOS 11.0, *) {
						if let customFont = UIFont(name: name, size: textStyle.defaultPointSize) {
							font = customFont
						}
					} else {
						let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: nativeTextStyle, compatibleWith: traitCollection)
						let max = textStyle.maximumPointSize ?? CGFloat.greatestFiniteMagnitude
						font = UIFont(name: name, size: min(fontDescriptor.pointSize, max))
					}
				}
			} else if let size = size {
				if let weight = weight {
					font = UIFont.systemFont(ofSize: size, weight: weight)
				} else {
					font = UIFont.systemFont(ofSize: size)
				}
			} else if let textStyle = textStyle, let nativeTextStyle = textStyle.style {
				if let weight = weight {
					if #available(iOS 11.0, *) {
						font = UIFont.systemFont(ofSize: textStyle.defaultPointSize, weight: weight)
					} else {
						let desc = UIFontDescriptor.preferredFontDescriptor(withTextStyle: nativeTextStyle, compatibleWith: traitCollection)
						let max = textStyle.maximumPointSize ?? CGFloat.greatestFiniteMagnitude
						font = UIFont.systemFont(ofSize: min(desc.pointSize, max), weight: weight)
					}
				} else {
					if let maximumPointSize = textStyle.maximumPointSize {
						if #available(iOS 11.0, *) {
							font = UIFont.preferredFont(forTextStyle: nativeTextStyle, compatibleWith: UITraitCollection(preferredContentSizeCategory: .large))
						} else {
							isAlreadyScalable = true
							let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: nativeTextStyle, compatibleWith: UITraitCollection(preferredContentSizeCategory: .large))
							font = UIFont(descriptor: fontDescriptor, size: min(fontDescriptor.pointSize, maximumPointSize))
						}
					} else {
						isAlreadyScalable = true
						font = UIFont.preferredFont(forTextStyle: nativeTextStyle, compatibleWith: traitCollection)
					}
				}
			}
			guard font != nil else { fatalError("Failed to load the font.") }
			if traits.isEmpty == false { font = font.with(traits: traits) }
			if isScalable && isAlreadyScalable == false {
				if #available(iOS 11.0, *) {
					if let nativeTextStyle = textStyle?.style {
						if let maximumPointSize = textStyle?.maximumPointSize {
							font = UIFontMetrics(forTextStyle: nativeTextStyle).scaledFont(for: font, maximumPointSize: maximumPointSize, compatibleWith: traitCollection)
						} else {
							font = UIFontMetrics(forTextStyle: nativeTextStyle).scaledFont(for: font, compatibleWith: traitCollection)
						}
					} else {
						font = UIFontMetrics.default.scaledFont(for: font, compatibleWith: traitCollection)
					}
				}
			}
			font.isScalable = isScalable
			font.fontType = key
			cache[key] = font
			return font
		}
	}
}

fileprivate var __FontTypeHandle: UInt8 = 0
fileprivate extension UIFont {
	struct FontType: Hashable {
		let name: String?
		let size: CGFloat?
		let textStyle: S.FontTextStyle?
		let weight: UIFont.Weight?
		let traits: UIFontDescriptor.SymbolicTraits
		let traitCollection: UITraitCollection?
		let isScalable: Bool
		func hash(into hasher: inout Hasher) {
			hasher.combine(name)
			hasher.combine(size)
			hasher.combine(textStyle)
			hasher.combine(weight)
			hasher.combine(traits.rawValue)
			hasher.combine(traitCollection)
			hasher.combine(isScalable)
		}
	}
	var fontType: FontType? {
		get { return objc_getAssociatedObject(self, &__FontTypeHandle) as? FontType }
		set { objc_setAssociatedObject(self, &__FontTypeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) }
	}
}

fileprivate var __ScalableHandle: UInt8 = 0
public extension UIFont {
	private static var cache = StardustFontResponsibleCache()
	func with(traits: UIFontDescriptor.SymbolicTraits) -> UIFont {
		let descriptor = fontDescriptor.withSymbolicTraits(traits)
		return UIFont(descriptor: descriptor!, size: 0)
	}

	class func font(name: String? = nil, size: CGFloat? = nil, textStyle: S.FontTextStyle? = nil, weight: UIFont.Weight? = nil, traits: UIFontDescriptor.SymbolicTraits, traitCollection: UITraitCollection? = nil, isScalable: Bool = true) -> UIFont {
		return cache.font(name: name, size: size, textStyle: textStyle, weight: weight, traits: traits, traitCollection: traitCollection, isScalable: isScalable)
	}

	convenience init?(name: String, scalable: Bool) {
		self.init(name: name, size: 4)
		self.isScalable = scalable
	}

	var isScalable: Bool {
		get { return objc_getAssociatedObject(self, &__ScalableHandle) as? Bool ?? false }
		set { objc_setAssociatedObject(self, &__ScalableHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) }
	}

	var textStyle: UIFont.TextStyle? {
		return fontDescriptor.fontAttributes[.textStyle] as? UIFont.TextStyle
	}

	var fixedFont: UIFont {
		if isScalable == false { return self }
		if let fontType = fontType {
			return UIFont.font(name: fontType.name, size: fontType.size, textStyle: fontType.textStyle, weight: fontType.weight, traits: fontType.traits, traitCollection: fontType.traitCollection, isScalable: false)
		}
		guard let textStyle = textStyle, let defaultSize = defaultSizes[textStyle] else { return self }
		let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: textStyle)
		return UIFont(descriptor: fontDescriptor, size: defaultSize)
	}

}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("Stardust.stylesheet.theme")
}

protocol StylesheetManagerTheming {
	static func currentTheme() -> GenericStyle
	func themeInit()
}

extension StylesheetManagerTheming {
	static func currentTheme() -> GenericStyle {
		return GenericStyle.shared()
	}
	func themeInit() {
		
	}
}

@objcMembers public class StylesheetManager: NSObject, StylesheetManagerTheming {
	dynamic public class func stylesheet(_ stylesheet: GenericStyle) -> GenericStyle {
		return currentTheme()
	}

	public static let `default` = StylesheetManager()
	public static var S: GenericStyle {
		return currentTheme()
	}

	private override init() {
		super.init()
		themeInit()
	}
}

/// Entry point for the app stylesheet
@objc(STRGenericStyle) @objcMembers public class GenericStyle: NSObject {

	public class func shared() -> GenericStyle {
		 struct __ { static let _sharedInstance = GenericStyle() }
		return __._sharedInstance
	}
	//MARK: - BorderlessButton
	public var _BorderlessButton: BorderlessButtonAppearanceProxy?
	open func BorderlessButtonStyle() -> BorderlessButtonAppearanceProxy {
		if let override = _BorderlessButton { return override }
			return BorderlessButtonAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var BorderlessButton: BorderlessButtonAppearanceProxy {
		get { return self.BorderlessButtonStyle() }
		set { _BorderlessButton = newValue }
	}
	@objc(BorderlessButtonAppearanceProxy) @objcMembers open class BorderlessButtonAppearanceProxy: ButtonVNextAppearanceProxy {

		//MARK: - BorderlessButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return BorderlessButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(BorderlessButtonBackgroundColorAppearanceProxy) @objcMembers open class BorderlessButtonbackgroundColorAppearanceProxy: ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - BorderlessButtonborderColor
		override open func borderColorStyle() -> ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return BorderlessButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(BorderlessButtonBorderColorAppearanceProxy) @objcMembers open class BorderlessButtonborderColorAppearanceProxy: ButtonVNextAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(0.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 7.0, left: 12.0, bottom: 7.0, right: 12.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - BorderlessButtontitleColor
		override open func titleColorStyle() -> ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return BorderlessButtontitleColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(BorderlessButtonTitleColorAppearanceProxy) @objcMembers open class BorderlessButtontitleColorAppearanceProxy: ButtonVNextAppearanceProxy.titleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - ButtonVNext
	public var _ButtonVNext: ButtonVNextAppearanceProxy?
	open func ButtonVNextStyle() -> ButtonVNextAppearanceProxy {
		if let override = _ButtonVNext { return override }
			return ButtonVNextAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var ButtonVNext: ButtonVNextAppearanceProxy {
		get { return self.ButtonVNextStyle() }
		set { _ButtonVNext = newValue }
	}
	@objc(ButtonVNextAppearanceProxy) @objcMembers open class ButtonVNextAppearanceProxy: NSObject {
		public let mainProxy: () -> GenericStyle
		public init(proxy: @escaping () -> GenericStyle) {
			self.mainProxy = proxy
		}

		//MARK: - backgroundColor
		public var _backgroundColor: backgroundColorAppearanceProxy?
		open func backgroundColorStyle() -> backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return backgroundColorAppearanceProxy(proxy: mainProxy)
			}
		public var backgroundColor: backgroundColorAppearanceProxy {
			get { return self.backgroundColorStyle() }
			set { _backgroundColor = newValue }
		}
		@objc(ButtonVNextBackgroundColorAppearanceProxy) @objcMembers open class backgroundColorAppearanceProxy: NSObject {
			public let mainProxy: () -> GenericStyle
			public init(proxy: @escaping () -> GenericStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: highlighted 
			public var _highlighted: UIColor?
			open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var highlighted: UIColor {
				get { return self.highlightedProperty() }
				set { _highlighted = newValue }
			}

			//MARK: standard 
			public var _standard: UIColor?
			open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var standard: UIColor {
				get { return self.standardProperty() }
				set { _standard = newValue }
			}
		}


		//MARK: - borderColor
		public var _borderColor: borderColorAppearanceProxy?
		open func borderColorStyle() -> borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return borderColorAppearanceProxy(proxy: mainProxy)
			}
		public var borderColor: borderColorAppearanceProxy {
			get { return self.borderColorStyle() }
			set { _borderColor = newValue }
		}
		@objc(ButtonVNextBorderColorAppearanceProxy) @objcMembers open class borderColorAppearanceProxy: NSObject {
			public let mainProxy: () -> GenericStyle
			public init(proxy: @escaping () -> GenericStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: highlighted 
			public var _highlighted: UIColor?
			open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var highlighted: UIColor {
				get { return self.highlightedProperty() }
				set { _highlighted = newValue }
			}

			//MARK: standard 
			public var _standard: UIColor?
			open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var standard: UIColor {
				get { return self.standardProperty() }
				set { _standard = newValue }
			}
		}


		//MARK: borderWidth 
		public var _borderWidth: CGFloat?
		open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}
		public var borderWidth: CGFloat {
			get { return self.borderWidthProperty() }
			set { _borderWidth = newValue }
		}

		//MARK: contentInsets 
		public var _contentInsets: UIEdgeInsets?
		open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}
		public var contentInsets: UIEdgeInsets {
			get { return self.contentInsetsProperty() }
			set { _contentInsets = newValue }
		}

		//MARK: cornerRadius 
		public var _cornerRadius: CGFloat?
		open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}
		public var cornerRadius: CGFloat {
			get { return self.cornerRadiusProperty() }
			set { _cornerRadius = newValue }
		}

		//MARK: hasBorders 
		public var _hasBorders: Bool?
		open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}
		public var hasBorders: Bool {
			get { return self.hasBordersProperty() }
			set { _hasBorders = newValue }
		}

		//MARK: - titleColor
		public var _titleColor: titleColorAppearanceProxy?
		open func titleColorStyle() -> titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return titleColorAppearanceProxy(proxy: mainProxy)
			}
		public var titleColor: titleColorAppearanceProxy {
			get { return self.titleColorStyle() }
			set { _titleColor = newValue }
		}
		@objc(ButtonVNextTitleColorAppearanceProxy) @objcMembers open class titleColorAppearanceProxy: NSObject {
			public let mainProxy: () -> GenericStyle
			public init(proxy: @escaping () -> GenericStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: highlighted 
			public var _highlighted: UIColor?
			open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var highlighted: UIColor {
				get { return self.highlightedProperty() }
				set { _highlighted = newValue }
			}

			//MARK: standard 
			public var _standard: UIColor?
			open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var standard: UIColor {
				get { return self.standardProperty() }
				set { _standard = newValue }
			}
		}


		//MARK: titleFont 
		public var _titleFont: UIFont?
		open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
		public var titleFont: UIFont {
			get { return self.titleFontProperty() }
			set { _titleFont = newValue }
		}
	}
	//MARK: - PrimaryFilledButton
	public var _PrimaryFilledButton: PrimaryFilledButtonAppearanceProxy?
	open func PrimaryFilledButtonStyle() -> PrimaryFilledButtonAppearanceProxy {
		if let override = _PrimaryFilledButton { return override }
			return PrimaryFilledButtonAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var PrimaryFilledButton: PrimaryFilledButtonAppearanceProxy {
		get { return self.PrimaryFilledButtonStyle() }
		set { _PrimaryFilledButton = newValue }
	}
	@objc(PrimaryFilledButtonAppearanceProxy) @objcMembers open class PrimaryFilledButtonAppearanceProxy: ButtonVNextAppearanceProxy {

		//MARK: - PrimaryFilledButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return PrimaryFilledButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryFilledButtonBackgroundColorAppearanceProxy) @objcMembers open class PrimaryFilledButtonbackgroundColorAppearanceProxy: ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - PrimaryFilledButtonborderColor
		override open func borderColorStyle() -> ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return PrimaryFilledButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryFilledButtonBorderColorAppearanceProxy) @objcMembers open class PrimaryFilledButtonborderColorAppearanceProxy: ButtonVNextAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - PrimaryFilledButtontitleColor
		override open func titleColorStyle() -> ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return PrimaryFilledButtontitleColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryFilledButtonTitleColorAppearanceProxy) @objcMembers open class PrimaryFilledButtontitleColorAppearanceProxy: ButtonVNextAppearanceProxy.titleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - PrimaryOutlineButton
	public var _PrimaryOutlineButton: PrimaryOutlineButtonAppearanceProxy?
	open func PrimaryOutlineButtonStyle() -> PrimaryOutlineButtonAppearanceProxy {
		if let override = _PrimaryOutlineButton { return override }
			return PrimaryOutlineButtonAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var PrimaryOutlineButton: PrimaryOutlineButtonAppearanceProxy {
		get { return self.PrimaryOutlineButtonStyle() }
		set { _PrimaryOutlineButton = newValue }
	}
	@objc(PrimaryOutlineButtonAppearanceProxy) @objcMembers open class PrimaryOutlineButtonAppearanceProxy: ButtonVNextAppearanceProxy {

		//MARK: - PrimaryOutlineButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return PrimaryOutlineButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class PrimaryOutlineButtonbackgroundColorAppearanceProxy: ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - PrimaryOutlineButtonborderColor
		override open func borderColorStyle() -> ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return PrimaryOutlineButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class PrimaryOutlineButtonborderColorAppearanceProxy: ButtonVNextAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - PrimaryOutlineButtontitleColor
		override open func titleColorStyle() -> ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return PrimaryOutlineButtontitleColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class PrimaryOutlineButtontitleColorAppearanceProxy: ButtonVNextAppearanceProxy.titleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.headline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - SecondaryOutlineButton
	public var _SecondaryOutlineButton: SecondaryOutlineButtonAppearanceProxy?
	open func SecondaryOutlineButtonStyle() -> SecondaryOutlineButtonAppearanceProxy {
		if let override = _SecondaryOutlineButton { return override }
			return SecondaryOutlineButtonAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var SecondaryOutlineButton: SecondaryOutlineButtonAppearanceProxy {
		get { return self.SecondaryOutlineButtonStyle() }
		set { _SecondaryOutlineButton = newValue }
	}
	@objc(SecondaryOutlineButtonAppearanceProxy) @objcMembers open class SecondaryOutlineButtonAppearanceProxy: ButtonVNextAppearanceProxy {

		//MARK: - SecondaryOutlineButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return SecondaryOutlineButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(SecondaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class SecondaryOutlineButtonbackgroundColorAppearanceProxy: ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - SecondaryOutlineButtonborderColor
		override open func borderColorStyle() -> ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return SecondaryOutlineButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(SecondaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class SecondaryOutlineButtonborderColorAppearanceProxy: ButtonVNextAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 10.0, left: 14.0, bottom: 10.0, right: 14.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - SecondaryOutlineButtontitleColor
		override open func titleColorStyle() -> ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return SecondaryOutlineButtontitleColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(SecondaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class SecondaryOutlineButtontitleColorAppearanceProxy: ButtonVNextAppearanceProxy.titleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - TertiaryOutlineButton
	public var _TertiaryOutlineButton: TertiaryOutlineButtonAppearanceProxy?
	open func TertiaryOutlineButtonStyle() -> TertiaryOutlineButtonAppearanceProxy {
		if let override = _TertiaryOutlineButton { return override }
			return TertiaryOutlineButtonAppearanceProxy(proxy: { return GenericStyle.shared() })
		}
	public var TertiaryOutlineButton: TertiaryOutlineButtonAppearanceProxy {
		get { return self.TertiaryOutlineButtonStyle() }
		set { _TertiaryOutlineButton = newValue }
	}
	@objc(TertiaryOutlineButtonAppearanceProxy) @objcMembers open class TertiaryOutlineButtonAppearanceProxy: ButtonVNextAppearanceProxy {

		//MARK: - TertiaryOutlineButtonbackgroundColor
		override open func backgroundColorStyle() -> ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TertiaryOutlineButtonbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(TertiaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class TertiaryOutlineButtonbackgroundColorAppearanceProxy: ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - TertiaryOutlineButtonborderColor
		override open func borderColorStyle() -> ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TertiaryOutlineButtonborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(TertiaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class TertiaryOutlineButtonborderColorAppearanceProxy: ButtonVNextAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 5.0, left: 8.0, bottom: 5.0, right: 8.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(5.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - TertiaryOutlineButtontitleColor
		override open func titleColorStyle() -> ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TertiaryOutlineButtontitleColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(TertiaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class TertiaryOutlineButtontitleColorAppearanceProxy: ButtonVNextAppearanceProxy.titleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}

}
fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension ButtonVNext: AppearaceProxyComponent {

	public typealias ApperanceProxyType = GenericStyle.ButtonVNextAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("Stardust") == false {
					return proxy
				}

				if proxy is GenericStyle.BorderlessButtonAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).BorderlessButton
				} else if proxy is GenericStyle.PrimaryFilledButtonAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).PrimaryFilledButton
				} else if proxy is GenericStyle.PrimaryOutlineButtonAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).PrimaryOutlineButton
				} else if proxy is GenericStyle.SecondaryOutlineButtonAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).SecondaryOutlineButton
				} else if proxy is GenericStyle.TertiaryOutlineButtonAppearanceProxy {
					return StylesheetManager.stylesheet(GenericStyle.shared()).TertiaryOutlineButton
				}
				return proxy
			}

			return StylesheetManager.stylesheet(GenericStyle.shared()).ButtonVNext
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
