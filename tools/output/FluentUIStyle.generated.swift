/// Autogenerated file

// swiftlint:disable all
import UIKit

fileprivate extension UserDefaults {
	subscript<T>(key: String) -> T? {
		get { return value(forKey: key) as? T }
		set { set(newValue, forKey: key) }
	}

	subscript<T: RawRepresentable>(key: String) -> T? {
		get {
			if let rawValue = value(forKey: key) as? T.RawValue {
				return T(rawValue: rawValue)
			}
			return nil
		}
		set { self[key] = newValue?.rawValue }
	}
}

@objc public enum Theme: Int {
	case fluentUI
	case teams

	public var stylesheet: GenericStyle {
		switch self {
		case .fluentUI: return FluentUIStyle.shared()
		case .teams: return TeamsStyle.shared()
		}
	}
}

fileprivate var __ThemeHandle: UInt8 = 0

public extension StylesheetManager {
	static func currentTheme() -> GenericStyle {
		return StylesheetManager.default.theme.stylesheet
	}

	private struct DefaultKeys {
		static let theme = "Stardust.theme"
	}

	 var theme: Theme {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeHandle) as? Theme else { return .fluentUI }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			NotificationCenter.default.post(name: .didChangeTheme, object: theme)
			UserDefaults.standard[DefaultKeys.theme] = theme
		}
	}

	func themeInit() {
		let theme: Theme = UserDefaults.standard[DefaultKeys.theme] ?? .fluentUI
		objc_setAssociatedObject(self, &__ThemeHandle, theme, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
	}
}

/// Entry point for the app stylesheet
@objc(STRFluentUIStyle) @objcMembers public class FluentUIStyle: GenericStyle {

	public override class func shared() -> FluentUIStyle {
		 struct __ { static let _sharedInstance = FluentUIStyle() }
		return __._sharedInstance
	}
	//MARK: - FluentUIStyleBorderlessButton
	override open func BorderlessButtonStyle() -> GenericStyle.BorderlessButtonAppearanceProxy {
		if let override = _BorderlessButton { return override }
			return FluentUIStyleBorderlessButtonAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStyleBorderlessButtonAppearanceProxy) @objcMembers open class FluentUIStyleBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorBorderlessButton
		override open func backgroundColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleBorderlessButtonBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - FluentUIStyleborderColorBorderlessButton
		override open func borderColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleBorderlessButtonBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(0.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 7.0, left: 12.0, bottom: 7.0, right: 12.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - FluentUIStyletitleColorBorderlessButton
		override open func titleColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleBorderlessButtonTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - FluentUIStyleButtonVNext
	override open func ButtonVNextStyle() -> GenericStyle.ButtonVNextAppearanceProxy {
		if let override = _ButtonVNext { return override }
			return FluentUIStyleButtonVNextAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStyleButtonVNextAppearanceProxy) @objcMembers open class FluentUIStyleButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorButtonVNext
		override open func backgroundColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleButtonVNextBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
		}


		//MARK: - FluentUIStyleborderColorButtonVNext
		override open func borderColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleButtonVNextBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
		}


		//MARK: - FluentUIStyletitleColorButtonVNext
		override open func titleColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleButtonVNextTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
		}

	}
	//MARK: - FluentUIStylePrimaryFilledButton
	override open func PrimaryFilledButtonStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy {
		if let override = _PrimaryFilledButton { return override }
			return FluentUIStylePrimaryFilledButtonAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStylePrimaryFilledButtonAppearanceProxy) @objcMembers open class FluentUIStylePrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorPrimaryFilledButton
		override open func backgroundColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryFilledButtonBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - FluentUIStyleborderColorPrimaryFilledButton
		override open func borderColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryFilledButtonBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - FluentUIStyletitleColorPrimaryFilledButton
		override open func titleColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryFilledButtonTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - FluentUIStylePrimaryOutlineButton
	override open func PrimaryOutlineButtonStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy {
		if let override = _PrimaryOutlineButton { return override }
			return FluentUIStylePrimaryOutlineButtonAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStylePrimaryOutlineButtonAppearanceProxy) @objcMembers open class FluentUIStylePrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorPrimaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - FluentUIStyleborderColorPrimaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - FluentUIStyletitleColorPrimaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStylePrimaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.headline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - FluentUIStyleSecondaryOutlineButton
	override open func SecondaryOutlineButtonStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy {
		if let override = _SecondaryOutlineButton { return override }
			return FluentUIStyleSecondaryOutlineButtonAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStyleSecondaryOutlineButtonAppearanceProxy) @objcMembers open class FluentUIStyleSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorSecondaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleSecondaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - FluentUIStyleborderColorSecondaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleSecondaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 10.0, left: 14.0, bottom: 10.0, right: 14.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(8.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - FluentUIStyletitleColorSecondaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleSecondaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - FluentUIStyleTertiaryOutlineButton
	override open func TertiaryOutlineButtonStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy {
		if let override = _TertiaryOutlineButton { return override }
			return FluentUIStyleTertiaryOutlineButtonAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	@objc(FluentUIStyleTertiaryOutlineButtonAppearanceProxy) @objcMembers open class FluentUIStyleTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy {

		//MARK: - FluentUIStylebackgroundColorTertiaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return FluentUIStylebackgroundColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleTertiaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class FluentUIStylebackgroundColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: - FluentUIStyleborderColorTertiaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return FluentUIStyleborderColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleTertiaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class FluentUIStyleborderColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 5.0, left: 8.0, bottom: 5.0, right: 8.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(5.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - FluentUIStyletitleColorTertiaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return FluentUIStyletitleColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(FluentUIStyleTertiaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class FluentUIStyletitleColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.41960785, blue: 0.92941177, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}

}