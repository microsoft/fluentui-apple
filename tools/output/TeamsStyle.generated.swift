/// Autogenerated file

// swiftlint:disable all
import UIKit

/// Entry point for the app stylesheet
@objc(STRTeamsStyle) @objcMembers public class TeamsStyle: GenericStyle {

	public override class func shared() -> TeamsStyle {
		 struct __ { static let _sharedInstance = TeamsStyle() }
		return __._sharedInstance
	}
	//MARK: - TeamsStyleBorderlessButton
	override open func BorderlessButtonStyle() -> GenericStyle.BorderlessButtonAppearanceProxy {
		if let override = _BorderlessButton { return override }
			return TeamsStyleBorderlessButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStyleBorderlessButtonAppearanceProxy) @objcMembers open class TeamsStyleBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorBorderlessButton
		override open func backgroundColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleBorderlessButtonBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: - TeamsStyleborderColorBorderlessButton
		override open func borderColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleBorderlessButtonBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(0.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 7.0, left: 12.0, bottom: 7.0, right: 12.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - TeamsStyletitleColorBorderlessButton
		override open func titleColorStyle() -> GenericStyle.BorderlessButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorBorderlessButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleBorderlessButtonTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorBorderlessButtonAppearanceProxy: GenericStyle.BorderlessButtonAppearanceProxy.BorderlessButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - TeamsStyleButtonVNext
	override open func ButtonVNextStyle() -> GenericStyle.ButtonVNextAppearanceProxy {
		if let override = _ButtonVNext { return override }
			return TeamsStyleButtonVNextAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStyleButtonVNextAppearanceProxy) @objcMembers open class TeamsStyleButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorButtonVNext
		override open func backgroundColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleButtonVNextBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.backgroundColorAppearanceProxy {
		}


		//MARK: - TeamsStyleborderColorButtonVNext
		override open func borderColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleButtonVNextBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.borderColorAppearanceProxy {
		}


		//MARK: - TeamsStyletitleColorButtonVNext
		override open func titleColorStyle() -> GenericStyle.ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorButtonVNextAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleButtonVNextTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorButtonVNextAppearanceProxy: GenericStyle.ButtonVNextAppearanceProxy.titleColorAppearanceProxy {
		}

	}
	//MARK: - TeamsStylePrimaryFilledButton
	override open func PrimaryFilledButtonStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy {
		if let override = _PrimaryFilledButton { return override }
			return TeamsStylePrimaryFilledButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStylePrimaryFilledButtonAppearanceProxy) @objcMembers open class TeamsStylePrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorPrimaryFilledButton
		override open func backgroundColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryFilledButtonBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: - TeamsStyleborderColorPrimaryFilledButton
		override open func borderColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryFilledButtonBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(0.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return false
			}

		//MARK: - TeamsStyletitleColorPrimaryFilledButton
		override open func titleColorStyle() -> GenericStyle.PrimaryFilledButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorPrimaryFilledButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryFilledButtonTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorPrimaryFilledButtonAppearanceProxy: GenericStyle.PrimaryFilledButtonAppearanceProxy.PrimaryFilledButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - TeamsStylePrimaryOutlineButton
	override open func PrimaryOutlineButtonStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy {
		if let override = _PrimaryOutlineButton { return override }
			return TeamsStylePrimaryOutlineButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStylePrimaryOutlineButtonAppearanceProxy) @objcMembers open class TeamsStylePrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorPrimaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: - TeamsStyleborderColorPrimaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 16.0, left: 20.0, bottom: 16.0, right: 20.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - TeamsStyletitleColorPrimaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.PrimaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorPrimaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStylePrimaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorPrimaryOutlineButtonAppearanceProxy: GenericStyle.PrimaryOutlineButtonAppearanceProxy.PrimaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.headline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - TeamsStyleSecondaryOutlineButton
	override open func SecondaryOutlineButtonStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy {
		if let override = _SecondaryOutlineButton { return override }
			return TeamsStyleSecondaryOutlineButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStyleSecondaryOutlineButtonAppearanceProxy) @objcMembers open class TeamsStyleSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorSecondaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleSecondaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: - TeamsStyleborderColorSecondaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleSecondaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 12.0, left: 14.0, bottom: 12.0, right: 14.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - TeamsStyletitleColorSecondaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.SecondaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorSecondaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleSecondaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorSecondaryOutlineButtonAppearanceProxy: GenericStyle.SecondaryOutlineButtonAppearanceProxy.SecondaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}
	//MARK: - TeamsStyleTertiaryOutlineButton
	override open func TertiaryOutlineButtonStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy {
		if let override = _TertiaryOutlineButton { return override }
			return TeamsStyleTertiaryOutlineButtonAppearanceProxy(proxy: { return TeamsStyle.shared() })
		}
	@objc(TeamsStyleTertiaryOutlineButtonAppearanceProxy) @objcMembers open class TeamsStyleTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy {

		//MARK: - TeamsStylebackgroundColorTertiaryOutlineButton
		override open func backgroundColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return TeamsStylebackgroundColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleTertiaryOutlineButtonBackgroundColorAppearanceProxy) @objcMembers open class TeamsStylebackgroundColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtonbackgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: - TeamsStyleborderColorTertiaryOutlineButton
		override open func borderColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return TeamsStyleborderColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleTertiaryOutlineButtonBorderColorAppearanceProxy) @objcMembers open class TeamsStyleborderColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtonborderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: borderWidth 
		override open func borderWidthProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _borderWidth { return override }
			return CGFloat(1.0)
			}

		//MARK: contentInsets 
		override open func contentInsetsProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIEdgeInsets {
			if let override = _contentInsets { return override }
			return UIEdgeInsets(top: 7.0, left: 9.0, bottom: 7.0, right: 9.0)
			}

		//MARK: cornerRadius 
		override open func cornerRadiusProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _cornerRadius { return override }
			return CGFloat(0.0)
			}

		//MARK: hasBorders 
		override open func hasBordersProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> Bool {
			if let override = _hasBorders { return override }
			return true
			}

		//MARK: - TeamsStyletitleColorTertiaryOutlineButton
		override open func titleColorStyle() -> GenericStyle.TertiaryOutlineButtonAppearanceProxy.titleColorAppearanceProxy {
			if let override = _titleColor { return override }
				return TeamsStyletitleColorTertiaryOutlineButtonAppearanceProxy(proxy: mainProxy)
			}
		@objc(TeamsStyleTertiaryOutlineButtonTitleColorAppearanceProxy) @objcMembers open class TeamsStyletitleColorTertiaryOutlineButtonAppearanceProxy: GenericStyle.TertiaryOutlineButtonAppearanceProxy.TertiaryOutlineButtontitleColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: highlighted 
			override open func highlightedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _highlighted { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}

			//MARK: standard 
			override open func standardProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _standard { return override }
					return UIColor(red: 0.30980393, green: 0.30980393, blue: 0.58431375, alpha: 1.0)
				}
		}


		//MARK: titleFont 
		override open func titleFontProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _titleFont { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
	}

}