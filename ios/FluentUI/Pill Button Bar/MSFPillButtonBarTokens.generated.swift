// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
extension FluentUIStyle {

	// MARK: - MSFPillButtonBarTokens
	open var MSFPillButtonBarTokens: MSFPillButtonBarTokensAppearanceProxy {
		return MSFPillButtonBarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFPillButtonBarTokensAppearanceProxy {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		// MARK: - cornerRadius 
		open var cornerRadius: CGFloat {
			return mainProxy().Spacing.medium
		}

		// MARK: - hoverBackgroundColor
		open var hoverBackgroundColor: hoverBackgroundColorAppearanceProxy {
			return hoverBackgroundColorAppearanceProxy(proxy: mainProxy)
		}
		open class hoverBackgroundColorAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - onBrand 
			open var onBrand: UIColor {
				return UIColor(light: mainProxy().Colors.Brand.shade10, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey8", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}

			// MARK: - primary 
			open var primary: UIColor {
				return UIColor(light: UIColor(named: "FluentColors/grey94", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey8", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}
		}


		// MARK: - maxButtonsSpacing 
		open var maxButtonsSpacing: CGFloat {
			return CGFloat(10.0)
		}

		// MARK: - minButtonVisibleWidth 
		open var minButtonVisibleWidth: CGFloat {
			return mainProxy().Spacing.large
		}

		// MARK: - minButtonWidth 
		open var minButtonWidth: CGFloat {
			return CGFloat(56.0)
		}

		// MARK: - minButtonsSpacing 
		open var minButtonsSpacing: CGFloat {
			return mainProxy().Spacing.xSmall
		}

		// MARK: - minHeight 
		open var minHeight: CGFloat {
			return CGFloat(28.0)
		}

		// MARK: - sideInset 
		open var sideInset: CGFloat {
			return mainProxy().Spacing.medium
		}
	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFPillButtonBarTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFPillButtonBarTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFPillButtonBarTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
