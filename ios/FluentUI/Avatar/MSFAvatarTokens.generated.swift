// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
extension FluentUIStyle {

	// MARK: - MSFAccentAvatarTokens
	open var MSFAccentAvatarTokens: MSFAccentAvatarTokensAppearanceProxy {
		return MSFAccentAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFAccentAvatarTokensAppearanceProxy: MSFAvatarTokensAppearanceProxy {

		// MARK: - backgroundDefaultColor 
		open override var backgroundDefaultColor: UIColor {
			return mainProxy().Colors.Brand.primary
		}

		// MARK: - foregroundDefaultColor 
		open override var foregroundDefaultColor: UIColor {
			return mainProxy().Icon.accentColor
		}

		// MARK: - ringDefaultColor 
		open override var ringDefaultColor: UIColor {
			return mainProxy().Colors.Brand.shade10
		}
	}
	// MARK: - MSFAvatarTokens
	open var MSFAvatarTokens: MSFAvatarTokensAppearanceProxy {
		return MSFAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFAvatarTokensAppearanceProxy {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		// MARK: - backgroundDefaultColor 
		open var backgroundDefaultColor: UIColor {
			return UIColor(light: UIColor(named: "FluentColors/white", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.primary, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - borderRadius
		open var borderRadius: borderRadiusAppearanceProxy {
			return borderRadiusAppearanceProxy(proxy: mainProxy)
		}
		open class borderRadiusAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Border.radius.none
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Border.radius.none
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Border.radius.none
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Border.radius.none
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Border.radius.none
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Border.radius.none
			}
		}


		// MARK: - foregroundDefaultColor 
		open var foregroundDefaultColor: UIColor {
			return UIColor(light: mainProxy().Colors.Brand.primary, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Icon.accentColor, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - presenceIconOutlineColor 
		open var presenceIconOutlineColor: UIColor {
			return mainProxy().Colors.Background.neutral1
		}

		// MARK: - presenceIconOutlineThickness
		open var presenceIconOutlineThickness: presenceIconOutlineThicknessAppearanceProxy {
			return presenceIconOutlineThicknessAppearanceProxy(proxy: mainProxy)
		}
		open class presenceIconOutlineThicknessAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Border.size.none
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Border.size.thick
			}
		}


		// MARK: - presenceIconSize
		open var presenceIconSize: presenceIconSizeAppearanceProxy {
			return presenceIconSizeAppearanceProxy(proxy: mainProxy)
		}
		open class presenceIconSizeAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Icon.size.xxSmall
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Icon.size.xxxSmall
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Icon.size.xxxSmall
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return CGFloat(0.0)
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Icon.size.xxSmall
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Icon.size.small
			}
		}


		// MARK: - ringDefaultColor 
		open var ringDefaultColor: UIColor {
			return mainProxy().Colors.Brand.tint10
		}

		// MARK: - ringGapColor 
		open var ringGapColor: UIColor {
			return mainProxy().Colors.Background.neutral1
		}

		// MARK: - ringInnerGap
		open var ringInnerGap: ringInnerGapAppearanceProxy {
			return ringInnerGapAppearanceProxy(proxy: mainProxy)
		}
		open class ringInnerGapAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Border.size.thicker
			}
		}


		// MARK: - ringOuterGap
		open var ringOuterGap: ringOuterGapAppearanceProxy {
			return ringOuterGapAppearanceProxy(proxy: mainProxy)
		}
		open class ringOuterGapAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Border.size.thicker
			}
		}


		// MARK: - ringThickness
		open var ringThickness: ringThicknessAppearanceProxy {
			return ringThicknessAppearanceProxy(proxy: mainProxy)
		}
		open class ringThicknessAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - small 
			open var small: CGFloat {
				return mainProxy().Border.size.thin
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return mainProxy().Border.size.thin
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return mainProxy().Border.size.thick
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return mainProxy().Border.size.thicker
			}
		}


		// MARK: - size
		open var size: sizeAppearanceProxy {
			return sizeAppearanceProxy(proxy: mainProxy)
		}
		open class sizeAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: CGFloat {
				return CGFloat(40.0)
			}

			// MARK: - medium 
			open var medium: CGFloat {
				return CGFloat(32.0)
			}

			// MARK: - small 
			open var small: CGFloat {
				return CGFloat(24.0)
			}

			// MARK: - xSmall 
			open var xSmall: CGFloat {
				return CGFloat(16.0)
			}

			// MARK: - xlarge 
			open var xlarge: CGFloat {
				return CGFloat(52.0)
			}

			// MARK: - xxlarge 
			open var xxlarge: CGFloat {
				return CGFloat(72.0)
			}
		}


		// MARK: - textCalculatedBackgroundColors 
		open var textCalculatedBackgroundColors: [UIColor] {
			return [
			UIColor(light: UIColor(named: "FluentColors/darkRedTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/darkRedShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/cranberryTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/cranberryShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/redTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/redShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/pumpkinTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/pumpkinShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/peachTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/peachShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/marigoldTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/marigoldShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/goldTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/goldShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/brassTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/brassShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/brownTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/brownShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/forestTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/forestShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/seafoamTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/seafoamShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/darkGreenTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/darkGreenShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lightTealTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lightTealShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/tealTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/tealShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/steelTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/steelShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/blueTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/blueShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/royalBlueTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/royalBlueShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/cornFlowerTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/cornFlowerShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/navyTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/navyShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lavenderTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lavenderShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/purpleTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/purpleShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/grapeTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grapeShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lilacTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lilacShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/pinkTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/pinkShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/magentaTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/magentaShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/plumTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/plumShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/beigeTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/beigeShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/minkTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/minkShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/platinumTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/platinumShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/anchorTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/anchorShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)]
		}

		// MARK: - textCalculatedForegroundColors 
		open var textCalculatedForegroundColors: [UIColor] {
			return [
			UIColor(light: UIColor(named: "FluentColors/darkRedShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/darkRedTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/cranberryShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/cranberryTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/redShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/redTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/pumpkinShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/pumpkinTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/peachShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/peachTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/marigoldShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/marigoldTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/goldShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/goldTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/brassShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/brassTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/brownShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/brownTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/forestShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/forestTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/seafoamShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/seafoamTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/darkGreenShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/darkGreenTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lightTealShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lightTealTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/tealShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/tealTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/steelShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/steelTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/blueShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/blueTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/royalBlueShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/royalBlueTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/cornFlowerShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/cornFlowerTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/navyShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/navyTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lavenderShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lavenderTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/purpleShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/purpleTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/grapeShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grapeTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/lilacShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/lilacTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/pinkShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/pinkTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/magentaShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/magentaTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/plumShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/plumTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/beigeShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/beigeTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/minkShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/minkTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/platinumShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/platinumTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil),
			UIColor(light: UIColor(named: "FluentColors/anchorShade30", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/anchorTint40", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)]
		}

		// MARK: - textFont
		open var textFont: textFontAppearanceProxy {
			return textFontAppearanceProxy(proxy: mainProxy)
		}
		open class textFontAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - large 
			open var large: UIFont {
				return UIFont.font(name: nil, size: 15.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], isScalable: false)
			}

			// MARK: - medium 
			open var medium: UIFont {
				return UIFont.font(name: nil, size: 13.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], isScalable: false)
			}

			// MARK: - small 
			open var small: UIFont {
				return UIFont.font(name: nil, size: 12.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], isScalable: false)
			}

			// MARK: - xSmall 
			open var xSmall: UIFont {
				return UIFont.font(name: nil, size: 9.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], isScalable: false)
			}

			// MARK: - xlarge 
			open var xlarge: UIFont {
				return UIFont.font(name: nil, size: 20.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], isScalable: false)
			}

			// MARK: - xxlarge 
			open var xxlarge: UIFont {
				return UIFont.font(name: nil, size: 28.0, textStyle: nil, weight: UIFont.Weight.medium, traits: [], isScalable: false)
			}
		}

	}
	// MARK: - MSFGroupAvatarTokens
	open var MSFGroupAvatarTokens: MSFGroupAvatarTokensAppearanceProxy {
		return MSFGroupAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFGroupAvatarTokensAppearanceProxy: MSFAvatarTokensAppearanceProxy {

		// MARK: - MSFGroupAvatarTokensborderRadius
		open override var borderRadius: MSFGroupAvatarTokensborderRadiusAppearanceProxy {
			return MSFGroupAvatarTokensborderRadiusAppearanceProxy(proxy: mainProxy)
		}
		open class MSFGroupAvatarTokensborderRadiusAppearanceProxy: MSFAvatarTokensAppearanceProxy.borderRadiusAppearanceProxy {

			// MARK: - large 
			open override var large: CGFloat {
				return mainProxy().Border.radius.large
			}

			// MARK: - medium 
			open override var medium: CGFloat {
				return mainProxy().Border.radius.medium
			}

			// MARK: - small 
			open override var small: CGFloat {
				return mainProxy().Border.radius.medium
			}

			// MARK: - xSmall 
			open override var xSmall: CGFloat {
				return mainProxy().Border.radius.small
			}

			// MARK: - xlarge 
			open override var xlarge: CGFloat {
				return mainProxy().Border.radius.large
			}

			// MARK: - xxlarge 
			open override var xxlarge: CGFloat {
				return mainProxy().Border.radius.xLarge
			}
		}

	}
	// MARK: - MSFOutlinedAvatarTokens
	open var MSFOutlinedAvatarTokens: MSFOutlinedAvatarTokensAppearanceProxy {
		return MSFOutlinedAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFOutlinedAvatarTokensAppearanceProxy: MSFAvatarTokensAppearanceProxy {

		// MARK: - backgroundDefaultColor 
		open override var backgroundDefaultColor: UIColor {
			return UIColor(light: UIColor(named: "FluentColors/grey94", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey26", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - foregroundDefaultColor 
		open override var foregroundDefaultColor: UIColor {
			return UIColor(light: UIColor(named: "FluentColors/grey42", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey78", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - ringDefaultColor 
		open override var ringDefaultColor: UIColor {
			return mainProxy().Colors.Background.neutralDisabled
		}
	}
	// MARK: - MSFOutlinedPrimaryAvatarTokens
	open var MSFOutlinedPrimaryAvatarTokens: MSFOutlinedPrimaryAvatarTokensAppearanceProxy {
		return MSFOutlinedPrimaryAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFOutlinedPrimaryAvatarTokensAppearanceProxy: MSFAvatarTokensAppearanceProxy {

		// MARK: - backgroundDefaultColor 
		open override var backgroundDefaultColor: UIColor {
			return UIColor(light: mainProxy().Colors.Brand.tint40, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey26", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - foregroundDefaultColor 
		open override var foregroundDefaultColor: UIColor {
			return UIColor(light: mainProxy().Colors.Brand.primary, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey78", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - ringDefaultColor 
		open override var ringDefaultColor: UIColor {
			return UIColor(light: mainProxy().Colors.Brand.tint10, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(named: "FluentColors/grey78", in: FluentUIFramework.colorsBundle, compatibleWith: nil)!, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}
	}
	// MARK: - MSFOverflowAvatarTokens
	open var MSFOverflowAvatarTokens: MSFOverflowAvatarTokensAppearanceProxy {
		return MSFOverflowAvatarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFOverflowAvatarTokensAppearanceProxy: MSFAvatarTokensAppearanceProxy {

		// MARK: - backgroundDefaultColor 
		open override var backgroundDefaultColor: UIColor {
			return mainProxy().Colors.Background.neutral4
		}

		// MARK: - foregroundDefaultColor 
		open override var foregroundDefaultColor: UIColor {
			return mainProxy().Colors.Foreground.neutral3
		}

		// MARK: - ringDefaultColor 
		open override var ringDefaultColor: UIColor {
			return mainProxy().Colors.Background.neutralDisabled
		}
	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFAvatarTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFAvatarTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("FluentUI") == false {
					return proxy
				}

				if proxy is FluentUIStyle.MSFAccentAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAccentAvatarTokens
				} else if proxy is FluentUIStyle.MSFGroupAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFGroupAvatarTokens
				} else if proxy is FluentUIStyle.MSFOutlinedAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOutlinedAvatarTokens
				} else if proxy is FluentUIStyle.MSFOutlinedPrimaryAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOutlinedPrimaryAvatarTokens
				} else if proxy is FluentUIStyle.MSFOverflowAvatarTokensAppearanceProxy {
					return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFOverflowAvatarTokens
				}
				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFAvatarTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
