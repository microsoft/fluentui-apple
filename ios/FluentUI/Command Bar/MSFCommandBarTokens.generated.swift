// swiftlint:disable all
/// Autogenerated file
import UIKit

/// Entry point for the app stylesheet
extension FluentUIStyle {

	// MARK: - MSFCommandBarTokens
	open var MSFCommandBarTokens: MSFCommandBarTokensAppearanceProxy {
		return MSFCommandBarTokensAppearanceProxy(proxy: { return self })
	}
	open class MSFCommandBarTokensAppearanceProxy {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		// MARK: - backgroundColor 
		open var backgroundColor: UIColor {
			return mainProxy().Colors.Background.neutral1
		}

		// MARK: - groupBorderRadius 
		open var groupBorderRadius: CGFloat {
			return mainProxy().Border.radius.xLarge
		}

		// MARK: - groupInterspace 
		open var groupInterspace: CGFloat {
			return mainProxy().Spacing.medium
		}

		// MARK: - itemBackgroundColor
		open var itemBackgroundColor: itemBackgroundColorAppearanceProxy {
			return itemBackgroundColorAppearanceProxy(proxy: mainProxy)
		}
		open class itemBackgroundColorAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - disabled 
			open var disabled: UIColor {
				return mainProxy().Colors.Stroke.neutral1
			}

			// MARK: - hover 
			open var hover: UIColor {
				return UIColor(light: mainProxy().Colors.Background.neutral5, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Stroke.neutral2, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}

			// MARK: - pressed 
			open var pressed: UIColor {
				return UIColor(light: mainProxy().Colors.Background.neutralDisabled, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Background.neutral5, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
			}

			// MARK: - rest 
			open var rest: UIColor {
				return mainProxy().Colors.Background.neutral4
			}

			// MARK: - selected 
			open var selected: UIColor {
				return mainProxy().Colors.Background.brandRest
			}
		}


		// MARK: - itemFixedIconColor 
		open var itemFixedIconColor: UIColor {
			return UIColor(light: mainProxy().Colors.Foreground.neutral1, lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Foreground.neutral3, darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
		}

		// MARK: - itemIconColor
		open var itemIconColor: itemIconColorAppearanceProxy {
			return itemIconColorAppearanceProxy(proxy: mainProxy)
		}
		open class itemIconColorAppearanceProxy {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			// MARK: - disabled 
			open var disabled: UIColor {
				return mainProxy().Colors.Foreground.neutralDisabled
			}

			// MARK: - hover 
			open var hover: UIColor {
				return mainProxy().Colors.Foreground.neutral1
			}

			// MARK: - pressed 
			open var pressed: UIColor {
				return mainProxy().Colors.Foreground.neutral1
			}

			// MARK: - rest 
			open var rest: UIColor {
				return mainProxy().Colors.Foreground.neutral1
			}

			// MARK: - selected 
			open var selected: UIColor {
				return mainProxy().Colors.Foreground.neutralInverted
			}
		}


		// MARK: - itemInterspace 
		open var itemInterspace: CGFloat {
			return mainProxy().Spacing.xxxSmall
		}
	}

}
fileprivate var __AppearanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension MSFCommandBarTokens: AppearaceProxyComponent {

	public typealias AppearanceProxyType = FluentUIStyle.MSFCommandBarTokensAppearanceProxy
	public var appearanceProxy: AppearanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__AppearanceProxyHandle) as? AppearanceProxyType {
				if !themeAware { return proxy }


				return proxy
			}

			return FluentUIThemeManager.stylesheet(FluentUIStyle.shared()).MSFCommandBarTokens
		}
		set {
			objc_setAssociatedObject(self, &__AppearanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
