/// Autogenerated file

// swiftlint:disable all
import UIKit

public class Application {
	@objc dynamic public class func preferredContentSizeCategory() -> UIContentSizeCategory {
		return .large
	}
}

/// Your view should conform to 'AppearaceProxyComponent'.
public protocol AppearaceProxyComponent: class {
    associatedtype ApperanceProxyType
    var appearanceProxy: ApperanceProxyType { get }
    var themeAware: Bool { get set }
    func didChangeAppearanceProxy()
}

public extension AppearaceProxyComponent {
    func initAppearanceProxy(themeAware: Bool = true) {
        self.themeAware = themeAware
        didChangeAppearanceProxy()
    }
}

private extension S.FontTextStyle {
    var style: UIFont.TextStyle? {
        switch self {
        case .body:
            return .body
        case .callout:
            return .callout
        case .caption1:
            return .caption1
        case .caption2:
            return .caption2
        case .footnote:
            return .footnote
        case .headline:
            return .headline
        case .largeTitle:
            return .largeTitle
        case .subheadline:
            return .subheadline
        case .title1:
            return .title1
        case .title2:
            return .title2
        case .title3:
            return .title3
        }
    }

    var defaultPointSize: CGFloat? {
        switch self {
        default:
            return nil
        }
    }

    var maximumPointSize: CGFloat? {
        switch self {
        default:
            return nil
        }
    }
}

private let defaultSizes: [UIFont.TextStyle: CGFloat] = {
    var sizes: [UIFont.TextStyle: CGFloat] = [.body: 17,
                                              .callout: 16,
                                              .caption2: 11,
                                              .caption1: 12,
                                              .footnote: 13,
                                              .headline: 17,
                                              .largeTitle: 34,
                                              .subheadline: 15,
                                              .title3: 20,
                                              .title2: 22,
                                              .title1: 28]
    return sizes
}()

private class FluentUIFontCache: NSObject {
    private lazy var cache = [UIFont.FontType: UIFont]()

    override init() {
        super.init()
        NotificationCenter.default.addObserver(self,
                                               selector: #selector(handleApplicationDidReceiveMemoryWarning),
                                               name: UIApplication.didReceiveMemoryWarningNotification, object: nil)
    }

    @objc private func handleApplicationDidReceiveMemoryWarning() {
        cache.removeAll()
    }

    func font(name: String? = nil,
              size: CGFloat? = nil,
              textStyle: S.FontTextStyle? = nil,
              weight: UIFont.Weight? = nil,
              traits: UIFontDescriptor.SymbolicTraits,
              traitCollection: UITraitCollection? = nil,
              isScalable: Bool = true) -> UIFont {
        let key = UIFont.FontType(name: name,
                                  size: size,
                                  textStyle: textStyle,
                                  weight: weight,
                                  traits: traits,
                                  traitCollection: traitCollection,
                                  isScalable: isScalable)
        if let font = cache[key] {
            return font
        }

        var font: UIFont!
        var isAlreadyScalable = false
        let fontSize = size ?? textStyle?.defaultPointSize

        if let name = name, let size = fontSize, let customFontWithSpecificSize = UIFont(name: name, size: size) {
            font = customFontWithSpecificSize
        } else if let size = fontSize {
            if let weight = weight {
                font = UIFont.systemFont(ofSize: size, weight: weight)
            } else {
                font = UIFont.systemFont(ofSize: size)
            }
        } else if let nativeTextStyle = textStyle?.style {
            isAlreadyScalable = isScalable && textStyle?.maximumPointSize == nil
            font = UIFont.preferredFont(forTextStyle: nativeTextStyle,
                                        compatibleWith: isScalable ? traitCollection : UITraitCollection(preferredContentSizeCategory: .large))
        }

        guard font != nil else {
            fatalError("Failed to load the font.")
        }

        if !traits.isEmpty {
            font = font.with(traits: traits)
        }

        if isScalable && !isAlreadyScalable {
            if let nativeTextStyle = textStyle?.style {
                if let maximumPointSize = textStyle?.maximumPointSize {
                    font = UIFontMetrics(forTextStyle: nativeTextStyle).scaledFont(for: font, maximumPointSize: maximumPointSize, compatibleWith: traitCollection)
                } else {
                    font = UIFontMetrics(forTextStyle: nativeTextStyle).scaledFont(for: font, compatibleWith: traitCollection)
                }
            } else {
                font = UIFontMetrics.default.scaledFont(for: font, compatibleWith: traitCollection)
            }
        }

        font.isScalable = isScalable
        font.fontType = key
        cache[key] = font
        return font
    }
}

private var fontTypeHandle: UInt8 = 0

private extension UIFont {
    struct FontType: Hashable {
        let name: String?
        let size: CGFloat?
        let textStyle: S.FontTextStyle?
        let weight: UIFont.Weight?
        let traits: UIFontDescriptor.SymbolicTraits
        let traitCollection: UITraitCollection?
        let isScalable: Bool
        func hash(into hasher: inout Hasher) {
            hasher.combine(name)
            hasher.combine(size)
            hasher.combine(textStyle)
            hasher.combine(weight)
            hasher.combine(traits.rawValue)
            hasher.combine(traitCollection)
            hasher.combine(isScalable)
        }
    }

    var fontType: FontType? {
        get { return objc_getAssociatedObject(self, &fontTypeHandle) as? FontType }
        set { objc_setAssociatedObject(self, &fontTypeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) }
    }
}

private var scalableHandle: UInt8 = 0

private extension UIFont {
    private static var cache = FluentUIFontCache()
    func with(traits: UIFontDescriptor.SymbolicTraits) -> UIFont {
        let descriptor = fontDescriptor.withSymbolicTraits(traits)
        return UIFont(descriptor: descriptor!, size: 0)
    }

    class func font(name: String? = nil,
                    size: CGFloat? = nil,
                    textStyle: S.FontTextStyle? = nil,
                    weight: UIFont.Weight? = nil,
                    traits: UIFontDescriptor.SymbolicTraits,
                    traitCollection: UITraitCollection? = nil,
                    isScalable: Bool = true) -> UIFont {
        return cache.font(name: name,
                          size: size,
                          textStyle: textStyle,
                          weight: weight,
                          traits: traits,
                          traitCollection: traitCollection,
                          isScalable: isScalable)
    }

    var isScalable: Bool {
        get { return objc_getAssociatedObject(self, &scalableHandle) as? Bool ?? false }
        set { objc_setAssociatedObject(self, &scalableHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC) }
    }

    var textStyle: UIFont.TextStyle? {
        return fontDescriptor.fontAttributes[.textStyle] as? UIFont.TextStyle
    }

    var fixedFont: UIFont {
        if isScalable == false {
            return self
        }

        if let fontType = fontType {
            return UIFont.font(name: fontType.name, size: fontType.size, textStyle: fontType.textStyle, weight: fontType.weight, traits: fontType.traits, traitCollection: fontType.traitCollection, isScalable: false)
        }

        guard let textStyle = textStyle, let defaultSize = defaultSizes[textStyle] else {
            return self
        }

        let fontDescriptor = UIFontDescriptor.preferredFontDescriptor(withTextStyle: textStyle)
        return UIFont(descriptor: fontDescriptor, size: defaultSize)
    }
}

public extension Notification.Name {
	static let didChangeTheme = Notification.Name("Stardust.stylesheet.theme")
}

protocol StylesheetManagerTheming {
	static func currentTheme() -> FluentUIStyle
	func themeInit()
}

extension StylesheetManagerTheming {
	static func currentTheme() -> FluentUIStyle {
		return FluentUIStyle.shared()
	}
	func themeInit() {
		
	}
}

@objcMembers public class StylesheetManager: NSObject, StylesheetManagerTheming {
	dynamic public class func stylesheet(_ stylesheet: FluentUIStyle) -> FluentUIStyle {
		return currentTheme()
	}

	public static let `default` = StylesheetManager()
	public static var S: FluentUIStyle {
		return currentTheme()
	}

	private override init() {
		super.init()
		themeInit()
	}
}

@objc(S) public class S: NSObject {

@objc public enum FontTextStyle: Int, Equatable {
	case body = 0
	case callout
	case caption1
	case caption2
	case footnote
	case headline
	case largeTitle
	case subheadline
	case title1
	case title2
	case title3
}

@objc public enum style: Int, Equatable {
	case filled = 0
	case regular
}

}
/// Entry point for the app stylesheet
@objc(STRFluentUIStyle) @objcMembers public class FluentUIStyle: NSObject {

	public class func shared() -> FluentUIStyle {
		 struct __ { static let _sharedInstance = FluentUIStyle() }
		return __._sharedInstance
	}
	//MARK: - AvatarTokens
	public var _AvatarTokens: AvatarTokensAppearanceProxy?
	open func AvatarTokensStyle() -> AvatarTokensAppearanceProxy {
		if let override = _AvatarTokens { return override }
			return AvatarTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var AvatarTokens: AvatarTokensAppearanceProxy {
		get { return self.AvatarTokensStyle() }
		set { _AvatarTokens = newValue }
	}
	@objc(AvatarTokensAppearanceProxy) @objcMembers open class AvatarTokensAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: backgroundDefaultColor 
		public var _backgroundDefaultColor: UIColor?
		open func backgroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundDefaultColor { return override }
			return UIColor(red: 0.92941177, green: 0.6745098, blue: 0.69411767, alpha: 1.0)
			}
		public var backgroundDefaultColor: UIColor {
			get { return self.backgroundDefaultColorProperty() }
			set { _backgroundDefaultColor = newValue }
		}

		//MARK: - borderRadius
		public var _borderRadius: borderRadiusAppearanceProxy?
		open func borderRadiusStyle() -> borderRadiusAppearanceProxy {
			if let override = _borderRadius { return override }
				return borderRadiusAppearanceProxy(proxy: mainProxy)
			}
		public var borderRadius: borderRadiusAppearanceProxy {
			get { return self.borderRadiusStyle() }
			set { _borderRadius = newValue }
		}
		@objc(AvatarTokensBorderRadiusAppearanceProxy) @objcMembers open class borderRadiusAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.radius.noneProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: foregroundDefaultColor 
		public var _foregroundDefaultColor: UIColor?
		open func foregroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundDefaultColor { return override }
			return UIColor(red: 0.43137255, green: 0.03529412, blue: 0.06666667, alpha: 1.0)
			}
		public var foregroundDefaultColor: UIColor {
			get { return self.foregroundDefaultColorProperty() }
			set { _foregroundDefaultColor = newValue }
		}

		//MARK: presenceIconOutlineColor 
		public var _presenceIconOutlineColor: UIColor?
		open func presenceIconOutlineColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _presenceIconOutlineColor { return override }
			return mainProxy().Colors.Background.neutral1Property(traitCollection)
			}
		public var presenceIconOutlineColor: UIColor {
			get { return self.presenceIconOutlineColorProperty() }
			set { _presenceIconOutlineColor = newValue }
		}

		//MARK: - presenceIconOutlineThickness
		public var _presenceIconOutlineThickness: presenceIconOutlineThicknessAppearanceProxy?
		open func presenceIconOutlineThicknessStyle() -> presenceIconOutlineThicknessAppearanceProxy {
			if let override = _presenceIconOutlineThickness { return override }
				return presenceIconOutlineThicknessAppearanceProxy(proxy: mainProxy)
			}
		public var presenceIconOutlineThickness: presenceIconOutlineThicknessAppearanceProxy {
			get { return self.presenceIconOutlineThicknessStyle() }
			set { _presenceIconOutlineThickness = newValue }
		}
		@objc(AvatarTokensPresenceIconOutlineThicknessAppearanceProxy) @objcMembers open class presenceIconOutlineThicknessAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - presenceIconSize
		public var _presenceIconSize: presenceIconSizeAppearanceProxy?
		open func presenceIconSizeStyle() -> presenceIconSizeAppearanceProxy {
			if let override = _presenceIconSize { return override }
				return presenceIconSizeAppearanceProxy(proxy: mainProxy)
			}
		public var presenceIconSize: presenceIconSizeAppearanceProxy {
			get { return self.presenceIconSizeStyle() }
			set { _presenceIconSize = newValue }
		}
		@objc(AvatarTokensPresenceIconSizeAppearanceProxy) @objcMembers open class presenceIconSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Icon.size.xxSmallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Icon.size.xxxSmallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Icon.size.xxxSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return CGFloat(0.0)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Icon.size.xSmallProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: ringDefaultColor 
		public var _ringDefaultColor: UIColor?
		open func ringDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringDefaultColor { return override }
			return UIColor(red: 0.77254903, green: 0.05882353, blue: 0.12156863, alpha: 1.0)
			}
		public var ringDefaultColor: UIColor {
			get { return self.ringDefaultColorProperty() }
			set { _ringDefaultColor = newValue }
		}

		//MARK: ringGapColor 
		public var _ringGapColor: UIColor?
		open func ringGapColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringGapColor { return override }
			return mainProxy().Colors.Background.neutral1Property(traitCollection)
			}
		public var ringGapColor: UIColor {
			get { return self.ringGapColorProperty() }
			set { _ringGapColor = newValue }
		}

		//MARK: - ringInnerGap
		public var _ringInnerGap: ringInnerGapAppearanceProxy?
		open func ringInnerGapStyle() -> ringInnerGapAppearanceProxy {
			if let override = _ringInnerGap { return override }
				return ringInnerGapAppearanceProxy(proxy: mainProxy)
			}
		public var ringInnerGap: ringInnerGapAppearanceProxy {
			get { return self.ringInnerGapStyle() }
			set { _ringInnerGap = newValue }
		}
		@objc(AvatarTokensRingInnerGapAppearanceProxy) @objcMembers open class ringInnerGapAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - ringOuterGap
		public var _ringOuterGap: ringOuterGapAppearanceProxy?
		open func ringOuterGapStyle() -> ringOuterGapAppearanceProxy {
			if let override = _ringOuterGap { return override }
				return ringOuterGapAppearanceProxy(proxy: mainProxy)
			}
		public var ringOuterGap: ringOuterGapAppearanceProxy {
			get { return self.ringOuterGapStyle() }
			set { _ringOuterGap = newValue }
		}
		@objc(AvatarTokensRingOuterGapAppearanceProxy) @objcMembers open class ringOuterGapAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - ringThickness
		public var _ringThickness: ringThicknessAppearanceProxy?
		open func ringThicknessStyle() -> ringThicknessAppearanceProxy {
			if let override = _ringThickness { return override }
				return ringThicknessAppearanceProxy(proxy: mainProxy)
			}
		public var ringThickness: ringThicknessAppearanceProxy {
			get { return self.ringThicknessStyle() }
			set { _ringThickness = newValue }
		}
		@objc(AvatarTokensRingThicknessAppearanceProxy) @objcMembers open class ringThicknessAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.thickProperty(traitCollection)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.thickerProperty(traitCollection)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - size
		public var _size: sizeAppearanceProxy?
		open func sizeStyle() -> sizeAppearanceProxy {
			if let override = _size { return override }
				return sizeAppearanceProxy(proxy: mainProxy)
			}
		public var size: sizeAppearanceProxy {
			get { return self.sizeStyle() }
			set { _size = newValue }
		}
		@objc(AvatarTokensSizeAppearanceProxy) @objcMembers open class sizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return CGFloat(40.0)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return CGFloat(32.0)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return CGFloat(24.0)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return CGFloat(16.0)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return CGFloat(52.0)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return CGFloat(72.0)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}


		//MARK: - textFont
		public var _textFont: textFontAppearanceProxy?
		open func textFontStyle() -> textFontAppearanceProxy {
			if let override = _textFont { return override }
				return textFontAppearanceProxy(proxy: mainProxy)
			}
		public var textFont: textFontAppearanceProxy {
			get { return self.textFontStyle() }
			set { _textFont = newValue }
		}
		@objc(AvatarTokensTextFontAppearanceProxy) @objcMembers open class textFontAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: UIFont?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _large { return override }
					return UIFont.font(name: nil, size: 15.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var large: UIFont {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: UIFont?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _medium { return override }
					return UIFont.font(name: nil, size: 13.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var medium: UIFont {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: UIFont?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _small { return override }
					return UIFont.font(name: nil, size: 12.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var small: UIFont {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: UIFont?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xSmall { return override }
					return UIFont.font(name: nil, size: 9.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xSmall: UIFont {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: UIFont?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xlarge { return override }
					return UIFont.font(name: nil, size: 20.0, textStyle: nil, weight: UIFont.Weight.regular, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xlarge: UIFont {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: UIFont?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _xxlarge { return override }
					return UIFont.font(name: nil, size: 28.0, textStyle: nil, weight: UIFont.Weight.medium, traits: [], traitCollection: traitCollection, isScalable: false)
				}
			public var xxlarge: UIFont {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}
		}

	}
	//MARK: - Border
	public var _Border: BorderAppearanceProxy?
	open func BorderStyle() -> BorderAppearanceProxy {
		if let override = _Border { return override }
			return BorderAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Border: BorderAppearanceProxy {
		get { return self.BorderStyle() }
		set { _Border = newValue }
	}
	@objc(BorderAppearanceProxy) @objcMembers open class BorderAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: - radius
		public var _radius: radiusAppearanceProxy?
		open func radiusStyle() -> radiusAppearanceProxy {
			if let override = _radius { return override }
				return radiusAppearanceProxy(proxy: mainProxy)
			}
		public var radius: radiusAppearanceProxy {
			get { return self.radiusStyle() }
			set { _radius = newValue }
		}
		@objc(BorderRadiusAppearanceProxy) @objcMembers open class radiusAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return CGFloat(8.0)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return CGFloat(4.0)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: none 
			public var _none: CGFloat?
			open func noneProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _none { return override }
					return CGFloat(0.0)
				}
			public var none: CGFloat {
				get { return self.noneProperty() }
				set { _none = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return CGFloat(2.0)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return CGFloat(12.0)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}
		}


		//MARK: - size
		public var _size: sizeAppearanceProxy?
		open func sizeStyle() -> sizeAppearanceProxy {
			if let override = _size { return override }
				return sizeAppearanceProxy(proxy: mainProxy)
			}
		public var size: sizeAppearanceProxy {
			get { return self.sizeStyle() }
			set { _size = newValue }
		}
		@objc(BorderSizeAppearanceProxy) @objcMembers open class sizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: none 
			public var _none: CGFloat?
			open func noneProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _none { return override }
					return CGFloat(0.0)
				}
			public var none: CGFloat {
				get { return self.noneProperty() }
				set { _none = newValue }
			}

			//MARK: thick 
			public var _thick: CGFloat?
			open func thickProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _thick { return override }
					return CGFloat(2.0)
				}
			public var thick: CGFloat {
				get { return self.thickProperty() }
				set { _thick = newValue }
			}

			//MARK: thicker 
			public var _thicker: CGFloat?
			open func thickerProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _thicker { return override }
					return CGFloat(4.0)
				}
			public var thicker: CGFloat {
				get { return self.thickerProperty() }
				set { _thicker = newValue }
			}

			//MARK: thickest 
			public var _thickest: CGFloat?
			open func thickestProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _thickest { return override }
					return CGFloat(6.0)
				}
			public var thickest: CGFloat {
				get { return self.thickestProperty() }
				set { _thickest = newValue }
			}

			//MARK: thin 
			public var _thin: CGFloat?
			open func thinProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _thin { return override }
					return CGFloat(1.0)
				}
			public var thin: CGFloat {
				get { return self.thinProperty() }
				set { _thin = newValue }
			}
		}

	}
	//MARK: - Colors
	public var _Colors: ColorsAppearanceProxy?
	open func ColorsStyle() -> ColorsAppearanceProxy {
		if let override = _Colors { return override }
			return ColorsAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Colors: ColorsAppearanceProxy {
		get { return self.ColorsStyle() }
		set { _Colors = newValue }
	}
	@objc(ColorsAppearanceProxy) @objcMembers open class ColorsAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: - Background
		public var _Background: BackgroundAppearanceProxy?
		open func BackgroundStyle() -> BackgroundAppearanceProxy {
			if let override = _Background { return override }
				return BackgroundAppearanceProxy(proxy: mainProxy)
			}
		public var Background: BackgroundAppearanceProxy {
			get { return self.BackgroundStyle() }
			set { _Background = newValue }
		}
		@objc(ColorsBackgroundAppearanceProxy) @objcMembers open class BackgroundAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: brandDisabled 
			public var _brandDisabled: UIColor?
			open func brandDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey88Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandDisabled: UIColor {
				get { return self.brandDisabledProperty() }
				set { _brandDisabled = newValue }
			}

			//MARK: brandHover 
			public var _brandHover: UIColor?
			open func brandHoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandHover { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade10Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade10Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandHover: UIColor {
				get { return self.brandHoverProperty() }
				set { _brandHover = newValue }
			}

			//MARK: brandPressed 
			public var _brandPressed: UIColor?
			open func brandPressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandPressed { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandPressed: UIColor {
				get { return self.brandPressedProperty() }
				set { _brandPressed = newValue }
			}

			//MARK: brandRest 
			public var _brandRest: UIColor?
			open func brandRestProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandRest { return override }
					return UIColor(light: mainProxy().Colors.Brand.primaryProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.primaryProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandRest: UIColor {
				get { return self.brandRestProperty() }
				set { _brandRest = newValue }
			}

			//MARK: brandSelected 
			public var _brandSelected: UIColor?
			open func brandSelectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandSelected { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade20Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade20Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandSelected: UIColor {
				get { return self.brandSelectedProperty() }
				set { _brandSelected = newValue }
			}

			//MARK: neutral1 
			public var _neutral1: UIColor?
			open func neutral1Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral1 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.whiteProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.blackProperty(traitCollection), darkHighContrast: nil, darkElevated: mainProxy().Colors.Neutral.grey4Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral1: UIColor {
				get { return self.neutral1Property() }
				set { _neutral1 = newValue }
			}

			//MARK: neutral2 
			public var _neutral2: UIColor?
			open func neutral2Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral2 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey98Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey4Property(traitCollection), darkHighContrast: nil, darkElevated: mainProxy().Colors.Neutral.grey8Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral2: UIColor {
				get { return self.neutral2Property() }
				set { _neutral2 = newValue }
			}

			//MARK: neutral3 
			public var _neutral3: UIColor?
			open func neutral3Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral3 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey96Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey8Property(traitCollection), darkHighContrast: nil, darkElevated: mainProxy().Colors.Neutral.grey16Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral3: UIColor {
				get { return self.neutral3Property() }
				set { _neutral3 = newValue }
			}

			//MARK: neutral4 
			public var _neutral4: UIColor?
			open func neutral4Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral4 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey94Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey16Property(traitCollection), darkHighContrast: nil, darkElevated: mainProxy().Colors.Neutral.grey24Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral4: UIColor {
				get { return self.neutral4Property() }
				set { _neutral4 = newValue }
			}

			//MARK: neutral5 
			public var _neutral5: UIColor?
			open func neutral5Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral5 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey92Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey36Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutral5: UIColor {
				get { return self.neutral5Property() }
				set { _neutral5 = newValue }
			}

			//MARK: neutralDisabled 
			public var _neutralDisabled: UIColor?
			open func neutralDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutralDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey88Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutralDisabled: UIColor {
				get { return self.neutralDisabledProperty() }
				set { _neutralDisabled = newValue }
			}
		}


		//MARK: - Brand
		public var _Brand: BrandAppearanceProxy?
		open func BrandStyle() -> BrandAppearanceProxy {
			if let override = _Brand { return override }
				return BrandAppearanceProxy(proxy: mainProxy)
			}
		public var Brand: BrandAppearanceProxy {
			get { return self.BrandStyle() }
			set { _Brand = newValue }
		}
		@objc(ColorsBrandAppearanceProxy) @objcMembers open class BrandAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: primary 
			public var _primary: UIColor?
			open func primaryProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _primary { return override }
					return UIColor(light: UIColor(red: 0.0, green: 0.47058824, blue: 0.83137256, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.0, green: 0.5254902, blue: 0.9411765, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var primary: UIColor {
				get { return self.primaryProperty() }
				set { _primary = newValue }
			}

			//MARK: shade10 
			public var _shade10: UIColor?
			open func shade10Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _shade10 { return override }
					return UIColor(light: UIColor(red: 0.0627451, green: 0.43137255, blue: 0.74509805, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.09411765, green: 0.5647059, blue: 0.94509804, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var shade10: UIColor {
				get { return self.shade10Property() }
				set { _shade10 = newValue }
			}

			//MARK: shade20 
			public var _shade20: UIColor?
			open func shade20Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _shade20 { return override }
					return UIColor(light: UIColor(red: 0.0, green: 0.3529412, blue: 0.61960787, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.22745098, green: 0.627451, blue: 0.9529412, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var shade20: UIColor {
				get { return self.shade20Property() }
				set { _shade20 = newValue }
			}

			//MARK: shade30 
			public var _shade30: UIColor?
			open func shade30Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _shade30 { return override }
					return UIColor(light: UIColor(red: 0.0, green: 0.27058825, blue: 0.47058824, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.42352942, green: 0.72156864, blue: 0.9647059, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var shade30: UIColor {
				get { return self.shade30Property() }
				set { _shade30 = newValue }
			}

			//MARK: tint10 
			public var _tint10: UIColor?
			open func tint10Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _tint10 { return override }
					return UIColor(light: UIColor(red: 0.16862746, green: 0.53333336, blue: 0.84705883, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.0, green: 0.47058824, blue: 0.83137256, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var tint10: UIColor {
				get { return self.tint10Property() }
				set { _tint10 = newValue }
			}

			//MARK: tint20 
			public var _tint20: UIColor?
			open func tint20Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _tint20 { return override }
					return UIColor(light: UIColor(red: 0.78039217, green: 0.8784314, blue: 0.95686275, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.0, green: 0.29803923, blue: 0.5294118, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var tint20: UIColor {
				get { return self.tint20Property() }
				set { _tint20 = newValue }
			}

			//MARK: tint30 
			public var _tint30: UIColor?
			open func tint30Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _tint30 { return override }
					return UIColor(light: UIColor(red: 0.87058824, green: 0.9254902, blue: 0.9764706, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.015686275, green: 0.21960784, blue: 0.38431373, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var tint30: UIColor {
				get { return self.tint30Property() }
				set { _tint30 = newValue }
			}

			//MARK: tint40 
			public var _tint40: UIColor?
			open func tint40Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _tint40 { return override }
					return UIColor(light: UIColor(red: 0.9372549, green: 0.9647059, blue: 0.9882353, alpha: 1.0), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: UIColor(red: 0.03529412, green: 0.17254902, blue: 0.2784314, alpha: 1.0), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var tint40: UIColor {
				get { return self.tint40Property() }
				set { _tint40 = newValue }
			}
		}


		//MARK: - Foreground
		public var _Foreground: ForegroundAppearanceProxy?
		open func ForegroundStyle() -> ForegroundAppearanceProxy {
			if let override = _Foreground { return override }
				return ForegroundAppearanceProxy(proxy: mainProxy)
			}
		public var Foreground: ForegroundAppearanceProxy {
			get { return self.ForegroundStyle() }
			set { _Foreground = newValue }
		}
		@objc(ColorsForegroundAppearanceProxy) @objcMembers open class ForegroundAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: brandDisabled 
			public var _brandDisabled: UIColor?
			open func brandDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey74Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey36Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandDisabled: UIColor {
				get { return self.brandDisabledProperty() }
				set { _brandDisabled = newValue }
			}

			//MARK: brandHover 
			public var _brandHover: UIColor?
			open func brandHoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandHover { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade10Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade10Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandHover: UIColor {
				get { return self.brandHoverProperty() }
				set { _brandHover = newValue }
			}

			//MARK: brandPressed 
			public var _brandPressed: UIColor?
			open func brandPressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandPressed { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandPressed: UIColor {
				get { return self.brandPressedProperty() }
				set { _brandPressed = newValue }
			}

			//MARK: brandRest 
			public var _brandRest: UIColor?
			open func brandRestProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandRest { return override }
					return UIColor(light: mainProxy().Colors.Brand.primaryProperty(traitCollection), lightHighContrast: mainProxy().Colors.Brand.shade20Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.primaryProperty(traitCollection), darkHighContrast: mainProxy().Colors.Brand.tint20Property(traitCollection), darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandRest: UIColor {
				get { return self.brandRestProperty() }
				set { _brandRest = newValue }
			}

			//MARK: brandSelected 
			public var _brandSelected: UIColor?
			open func brandSelectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandSelected { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade20Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade20Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandSelected: UIColor {
				get { return self.brandSelectedProperty() }
				set { _brandSelected = newValue }
			}

			//MARK: neutral1 
			public var _neutral1: UIColor?
			open func neutral1Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral1 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey14Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.blackProperty(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.whiteProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutral1: UIColor {
				get { return self.neutral1Property() }
				set { _neutral1 = newValue }
			}

			//MARK: neutral2 
			public var _neutral2: UIColor?
			open func neutral2Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral2 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey26Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.blackProperty(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.whiteProperty(traitCollection), darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutral2: UIColor {
				get { return self.neutral2Property() }
				set { _neutral2 = newValue }
			}

			//MARK: neutral3 
			public var _neutral3: UIColor?
			open func neutral3Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral3 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey14Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutral3: UIColor {
				get { return self.neutral3Property() }
				set { _neutral3 = newValue }
			}

			//MARK: neutral4 
			public var _neutral4: UIColor?
			open func neutral4Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral4 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey50Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey26Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey52Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutral4: UIColor {
				get { return self.neutral4Property() }
				set { _neutral4 = newValue }
			}

			//MARK: neutralDisabled 
			public var _neutralDisabled: UIColor?
			open func neutralDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutralDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey74Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey36Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey62Property(traitCollection), darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutralDisabled: UIColor {
				get { return self.neutralDisabledProperty() }
				set { _neutralDisabled = newValue }
			}

			//MARK: neutralInverted 
			public var _neutralInverted: UIColor?
			open func neutralInvertedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutralInverted { return override }
					return UIColor(light: mainProxy().Colors.Neutral.whiteProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.blackProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutralInverted: UIColor {
				get { return self.neutralInvertedProperty() }
				set { _neutralInverted = newValue }
			}
		}


		//MARK: - Neutral
		public var _Neutral: NeutralAppearanceProxy?
		open func NeutralStyle() -> NeutralAppearanceProxy {
			if let override = _Neutral { return override }
				return NeutralAppearanceProxy(proxy: mainProxy)
			}
		public var Neutral: NeutralAppearanceProxy {
			get { return self.NeutralStyle() }
			set { _Neutral = newValue }
		}
		@objc(ColorsNeutralAppearanceProxy) @objcMembers open class NeutralAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: black 
			public var _black: UIColor?
			open func blackProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _black { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 1.0)
				}
			public var black: UIColor {
				get { return self.blackProperty() }
				set { _black = newValue }
			}

			//MARK: clear 
			public var _clear: UIColor?
			open func clearProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _clear { return override }
					return UIColor(red: 0.0, green: 0.0, blue: 0.0, alpha: 0.0)
				}
			public var clear: UIColor {
				get { return self.clearProperty() }
				set { _clear = newValue }
			}

			//MARK: grey10 
			public var _grey10: UIColor?
			open func grey10Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey10 { return override }
					return UIColor(red: 0.101960786, green: 0.101960786, blue: 0.101960786, alpha: 1.0)
				}
			public var grey10: UIColor {
				get { return self.grey10Property() }
				set { _grey10 = newValue }
			}

			//MARK: grey12 
			public var _grey12: UIColor?
			open func grey12Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey12 { return override }
					return UIColor(red: 0.12156863, green: 0.12156863, blue: 0.12156863, alpha: 1.0)
				}
			public var grey12: UIColor {
				get { return self.grey12Property() }
				set { _grey12 = newValue }
			}

			//MARK: grey14 
			public var _grey14: UIColor?
			open func grey14Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey14 { return override }
					return UIColor(red: 0.14117648, green: 0.14117648, blue: 0.14117648, alpha: 1.0)
				}
			public var grey14: UIColor {
				get { return self.grey14Property() }
				set { _grey14 = newValue }
			}

			//MARK: grey16 
			public var _grey16: UIColor?
			open func grey16Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey16 { return override }
					return UIColor(red: 0.16078432, green: 0.16078432, blue: 0.16078432, alpha: 1.0)
				}
			public var grey16: UIColor {
				get { return self.grey16Property() }
				set { _grey16 = newValue }
			}

			//MARK: grey18 
			public var _grey18: UIColor?
			open func grey18Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey18 { return override }
					return UIColor(red: 0.18039216, green: 0.18039216, blue: 0.18039216, alpha: 1.0)
				}
			public var grey18: UIColor {
				get { return self.grey18Property() }
				set { _grey18 = newValue }
			}

			//MARK: grey2 
			public var _grey2: UIColor?
			open func grey2Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey2 { return override }
					return UIColor(red: 0.019607844, green: 0.019607844, blue: 0.019607844, alpha: 1.0)
				}
			public var grey2: UIColor {
				get { return self.grey2Property() }
				set { _grey2 = newValue }
			}

			//MARK: grey20 
			public var _grey20: UIColor?
			open func grey20Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey20 { return override }
					return UIColor(red: 0.2, green: 0.2, blue: 0.2, alpha: 1.0)
				}
			public var grey20: UIColor {
				get { return self.grey20Property() }
				set { _grey20 = newValue }
			}

			//MARK: grey22 
			public var _grey22: UIColor?
			open func grey22Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey22 { return override }
					return UIColor(red: 0.21960784, green: 0.21960784, blue: 0.21960784, alpha: 1.0)
				}
			public var grey22: UIColor {
				get { return self.grey22Property() }
				set { _grey22 = newValue }
			}

			//MARK: grey24 
			public var _grey24: UIColor?
			open func grey24Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey24 { return override }
					return UIColor(red: 0.23921569, green: 0.23921569, blue: 0.23921569, alpha: 1.0)
				}
			public var grey24: UIColor {
				get { return self.grey24Property() }
				set { _grey24 = newValue }
			}

			//MARK: grey26 
			public var _grey26: UIColor?
			open func grey26Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey26 { return override }
					return UIColor(red: 0.25882354, green: 0.25882354, blue: 0.25882354, alpha: 1.0)
				}
			public var grey26: UIColor {
				get { return self.grey26Property() }
				set { _grey26 = newValue }
			}

			//MARK: grey28 
			public var _grey28: UIColor?
			open func grey28Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey28 { return override }
					return UIColor(red: 0.2784314, green: 0.2784314, blue: 0.2784314, alpha: 1.0)
				}
			public var grey28: UIColor {
				get { return self.grey28Property() }
				set { _grey28 = newValue }
			}

			//MARK: grey30 
			public var _grey30: UIColor?
			open func grey30Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey30 { return override }
					return UIColor(red: 0.3019608, green: 0.3019608, blue: 0.3019608, alpha: 1.0)
				}
			public var grey30: UIColor {
				get { return self.grey30Property() }
				set { _grey30 = newValue }
			}

			//MARK: grey32 
			public var _grey32: UIColor?
			open func grey32Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey32 { return override }
					return UIColor(red: 0.32156864, green: 0.32156864, blue: 0.32156864, alpha: 1.0)
				}
			public var grey32: UIColor {
				get { return self.grey32Property() }
				set { _grey32 = newValue }
			}

			//MARK: grey34 
			public var _grey34: UIColor?
			open func grey34Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey34 { return override }
					return UIColor(red: 0.34117648, green: 0.34117648, blue: 0.34117648, alpha: 1.0)
				}
			public var grey34: UIColor {
				get { return self.grey34Property() }
				set { _grey34 = newValue }
			}

			//MARK: grey36 
			public var _grey36: UIColor?
			open func grey36Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey36 { return override }
					return UIColor(red: 0.36078432, green: 0.36078432, blue: 0.36078432, alpha: 1.0)
				}
			public var grey36: UIColor {
				get { return self.grey36Property() }
				set { _grey36 = newValue }
			}

			//MARK: grey38 
			public var _grey38: UIColor?
			open func grey38Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey38 { return override }
					return UIColor(red: 0.38039216, green: 0.38039216, blue: 0.38039216, alpha: 1.0)
				}
			public var grey38: UIColor {
				get { return self.grey38Property() }
				set { _grey38 = newValue }
			}

			//MARK: grey4 
			public var _grey4: UIColor?
			open func grey4Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey4 { return override }
					return UIColor(red: 0.039215688, green: 0.039215688, blue: 0.039215688, alpha: 1.0)
				}
			public var grey4: UIColor {
				get { return self.grey4Property() }
				set { _grey4 = newValue }
			}

			//MARK: grey40 
			public var _grey40: UIColor?
			open func grey40Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey40 { return override }
					return UIColor(red: 0.4, green: 0.4, blue: 0.4, alpha: 1.0)
				}
			public var grey40: UIColor {
				get { return self.grey40Property() }
				set { _grey40 = newValue }
			}

			//MARK: grey42 
			public var _grey42: UIColor?
			open func grey42Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey42 { return override }
					return UIColor(red: 0.41960785, green: 0.41960785, blue: 0.41960785, alpha: 1.0)
				}
			public var grey42: UIColor {
				get { return self.grey42Property() }
				set { _grey42 = newValue }
			}

			//MARK: grey44 
			public var _grey44: UIColor?
			open func grey44Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey44 { return override }
					return UIColor(red: 0.4392157, green: 0.4392157, blue: 0.4392157, alpha: 1.0)
				}
			public var grey44: UIColor {
				get { return self.grey44Property() }
				set { _grey44 = newValue }
			}

			//MARK: grey46 
			public var _grey46: UIColor?
			open func grey46Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey46 { return override }
					return UIColor(red: 0.45882353, green: 0.45882353, blue: 0.45882353, alpha: 1.0)
				}
			public var grey46: UIColor {
				get { return self.grey46Property() }
				set { _grey46 = newValue }
			}

			//MARK: grey48 
			public var _grey48: UIColor?
			open func grey48Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey48 { return override }
					return UIColor(red: 0.47843137, green: 0.47843137, blue: 0.47843137, alpha: 1.0)
				}
			public var grey48: UIColor {
				get { return self.grey48Property() }
				set { _grey48 = newValue }
			}

			//MARK: grey50 
			public var _grey50: UIColor?
			open func grey50Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey50 { return override }
					return UIColor(red: 0.5019608, green: 0.5019608, blue: 0.5019608, alpha: 1.0)
				}
			public var grey50: UIColor {
				get { return self.grey50Property() }
				set { _grey50 = newValue }
			}

			//MARK: grey52 
			public var _grey52: UIColor?
			open func grey52Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey52 { return override }
					return UIColor(red: 0.52156866, green: 0.52156866, blue: 0.52156866, alpha: 1.0)
				}
			public var grey52: UIColor {
				get { return self.grey52Property() }
				set { _grey52 = newValue }
			}

			//MARK: grey54 
			public var _grey54: UIColor?
			open func grey54Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey54 { return override }
					return UIColor(red: 0.5411765, green: 0.5411765, blue: 0.5411765, alpha: 1.0)
				}
			public var grey54: UIColor {
				get { return self.grey54Property() }
				set { _grey54 = newValue }
			}

			//MARK: grey56 
			public var _grey56: UIColor?
			open func grey56Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey56 { return override }
					return UIColor(red: 0.56078434, green: 0.56078434, blue: 0.56078434, alpha: 1.0)
				}
			public var grey56: UIColor {
				get { return self.grey56Property() }
				set { _grey56 = newValue }
			}

			//MARK: grey58 
			public var _grey58: UIColor?
			open func grey58Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey58 { return override }
					return UIColor(red: 0.5803922, green: 0.5803922, blue: 0.5803922, alpha: 1.0)
				}
			public var grey58: UIColor {
				get { return self.grey58Property() }
				set { _grey58 = newValue }
			}

			//MARK: grey6 
			public var _grey6: UIColor?
			open func grey6Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey6 { return override }
					return UIColor(red: 0.05882353, green: 0.05882353, blue: 0.05882353, alpha: 1.0)
				}
			public var grey6: UIColor {
				get { return self.grey6Property() }
				set { _grey6 = newValue }
			}

			//MARK: grey60 
			public var _grey60: UIColor?
			open func grey60Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey60 { return override }
					return UIColor(red: 0.6, green: 0.6, blue: 0.6, alpha: 1.0)
				}
			public var grey60: UIColor {
				get { return self.grey60Property() }
				set { _grey60 = newValue }
			}

			//MARK: grey62 
			public var _grey62: UIColor?
			open func grey62Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey62 { return override }
					return UIColor(red: 0.61960787, green: 0.61960787, blue: 0.61960787, alpha: 1.0)
				}
			public var grey62: UIColor {
				get { return self.grey62Property() }
				set { _grey62 = newValue }
			}

			//MARK: grey64 
			public var _grey64: UIColor?
			open func grey64Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey64 { return override }
					return UIColor(red: 0.6392157, green: 0.6392157, blue: 0.6392157, alpha: 1.0)
				}
			public var grey64: UIColor {
				get { return self.grey64Property() }
				set { _grey64 = newValue }
			}

			//MARK: grey66 
			public var _grey66: UIColor?
			open func grey66Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey66 { return override }
					return UIColor(red: 0.65882355, green: 0.65882355, blue: 0.65882355, alpha: 1.0)
				}
			public var grey66: UIColor {
				get { return self.grey66Property() }
				set { _grey66 = newValue }
			}

			//MARK: grey68 
			public var _grey68: UIColor?
			open func grey68Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey68 { return override }
					return UIColor(red: 0.6784314, green: 0.6784314, blue: 0.6784314, alpha: 1.0)
				}
			public var grey68: UIColor {
				get { return self.grey68Property() }
				set { _grey68 = newValue }
			}

			//MARK: grey70 
			public var _grey70: UIColor?
			open func grey70Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey70 { return override }
					return UIColor(red: 0.69803923, green: 0.69803923, blue: 0.69803923, alpha: 1.0)
				}
			public var grey70: UIColor {
				get { return self.grey70Property() }
				set { _grey70 = newValue }
			}

			//MARK: grey72 
			public var _grey72: UIColor?
			open func grey72Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey72 { return override }
					return UIColor(red: 0.72156864, green: 0.72156864, blue: 0.72156864, alpha: 1.0)
				}
			public var grey72: UIColor {
				get { return self.grey72Property() }
				set { _grey72 = newValue }
			}

			//MARK: grey74 
			public var _grey74: UIColor?
			open func grey74Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey74 { return override }
					return UIColor(red: 0.7411765, green: 0.7411765, blue: 0.7411765, alpha: 1.0)
				}
			public var grey74: UIColor {
				get { return self.grey74Property() }
				set { _grey74 = newValue }
			}

			//MARK: grey76 
			public var _grey76: UIColor?
			open func grey76Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey76 { return override }
					return UIColor(red: 0.7607843, green: 0.7607843, blue: 0.7607843, alpha: 1.0)
				}
			public var grey76: UIColor {
				get { return self.grey76Property() }
				set { _grey76 = newValue }
			}

			//MARK: grey78 
			public var _grey78: UIColor?
			open func grey78Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey78 { return override }
					return UIColor(red: 0.78039217, green: 0.78039217, blue: 0.78039217, alpha: 1.0)
				}
			public var grey78: UIColor {
				get { return self.grey78Property() }
				set { _grey78 = newValue }
			}

			//MARK: grey8 
			public var _grey8: UIColor?
			open func grey8Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey8 { return override }
					return UIColor(red: 0.078431375, green: 0.078431375, blue: 0.078431375, alpha: 1.0)
				}
			public var grey8: UIColor {
				get { return self.grey8Property() }
				set { _grey8 = newValue }
			}

			//MARK: grey80 
			public var _grey80: UIColor?
			open func grey80Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey80 { return override }
					return UIColor(red: 0.8, green: 0.8, blue: 0.8, alpha: 1.0)
				}
			public var grey80: UIColor {
				get { return self.grey80Property() }
				set { _grey80 = newValue }
			}

			//MARK: grey82 
			public var _grey82: UIColor?
			open func grey82Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey82 { return override }
					return UIColor(red: 0.81960785, green: 0.81960785, blue: 0.81960785, alpha: 1.0)
				}
			public var grey82: UIColor {
				get { return self.grey82Property() }
				set { _grey82 = newValue }
			}

			//MARK: grey84 
			public var _grey84: UIColor?
			open func grey84Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey84 { return override }
					return UIColor(red: 0.8392157, green: 0.8392157, blue: 0.8392157, alpha: 1.0)
				}
			public var grey84: UIColor {
				get { return self.grey84Property() }
				set { _grey84 = newValue }
			}

			//MARK: grey86 
			public var _grey86: UIColor?
			open func grey86Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey86 { return override }
					return UIColor(red: 0.85882354, green: 0.85882354, blue: 0.85882354, alpha: 1.0)
				}
			public var grey86: UIColor {
				get { return self.grey86Property() }
				set { _grey86 = newValue }
			}

			//MARK: grey88 
			public var _grey88: UIColor?
			open func grey88Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey88 { return override }
					return UIColor(red: 0.8784314, green: 0.8784314, blue: 0.8784314, alpha: 1.0)
				}
			public var grey88: UIColor {
				get { return self.grey88Property() }
				set { _grey88 = newValue }
			}

			//MARK: grey90 
			public var _grey90: UIColor?
			open func grey90Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey90 { return override }
					return UIColor(red: 0.8980392, green: 0.8980392, blue: 0.8980392, alpha: 1.0)
				}
			public var grey90: UIColor {
				get { return self.grey90Property() }
				set { _grey90 = newValue }
			}

			//MARK: grey92 
			public var _grey92: UIColor?
			open func grey92Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey92 { return override }
					return UIColor(red: 0.92156863, green: 0.92156863, blue: 0.92156863, alpha: 1.0)
				}
			public var grey92: UIColor {
				get { return self.grey92Property() }
				set { _grey92 = newValue }
			}

			//MARK: grey94 
			public var _grey94: UIColor?
			open func grey94Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey94 { return override }
					return UIColor(red: 0.9411765, green: 0.9411765, blue: 0.9411765, alpha: 1.0)
				}
			public var grey94: UIColor {
				get { return self.grey94Property() }
				set { _grey94 = newValue }
			}

			//MARK: grey96 
			public var _grey96: UIColor?
			open func grey96Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey96 { return override }
					return UIColor(red: 0.9607843, green: 0.9607843, blue: 0.9607843, alpha: 1.0)
				}
			public var grey96: UIColor {
				get { return self.grey96Property() }
				set { _grey96 = newValue }
			}

			//MARK: grey98 
			public var _grey98: UIColor?
			open func grey98Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _grey98 { return override }
					return UIColor(red: 0.98039216, green: 0.98039216, blue: 0.98039216, alpha: 1.0)
				}
			public var grey98: UIColor {
				get { return self.grey98Property() }
				set { _grey98 = newValue }
			}

			//MARK: white 
			public var _white: UIColor?
			open func whiteProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _white { return override }
					return UIColor(red: 1.0, green: 1.0, blue: 1.0, alpha: 1.0)
				}
			public var white: UIColor {
				get { return self.whiteProperty() }
				set { _white = newValue }
			}
		}


		//MARK: - Presence
		public var _Presence: PresenceAppearanceProxy?
		open func PresenceStyle() -> PresenceAppearanceProxy {
			if let override = _Presence { return override }
				return PresenceAppearanceProxy(proxy: mainProxy)
			}
		public var Presence: PresenceAppearanceProxy {
			get { return self.PresenceStyle() }
			set { _Presence = newValue }
		}
		@objc(ColorsPresenceAppearanceProxy) @objcMembers open class PresenceAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: available 
			public var _available: UIColor?
			open func availableProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _available { return override }
					return UIColor(named: "FluentColors/presenceAvailable", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var available: UIColor {
				get { return self.availableProperty() }
				set { _available = newValue }
			}

			//MARK: away 
			public var _away: UIColor?
			open func awayProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _away { return override }
					return UIColor(named: "FluentColors/presenceAway", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var away: UIColor {
				get { return self.awayProperty() }
				set { _away = newValue }
			}

			//MARK: blocked 
			public var _blocked: UIColor?
			open func blockedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _blocked { return override }
					return UIColor(named: "FluentColors/presenceBlocked", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var blocked: UIColor {
				get { return self.blockedProperty() }
				set { _blocked = newValue }
			}

			//MARK: busy 
			public var _busy: UIColor?
			open func busyProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _busy { return override }
					return UIColor(named: "FluentColors/presenceBusy", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var busy: UIColor {
				get { return self.busyProperty() }
				set { _busy = newValue }
			}

			//MARK: doNotDisturb 
			public var _doNotDisturb: UIColor?
			open func doNotDisturbProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _doNotDisturb { return override }
					return UIColor(named: "FluentColors/presenceDnd", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var doNotDisturb: UIColor {
				get { return self.doNotDisturbProperty() }
				set { _doNotDisturb = newValue }
			}

			//MARK: offline 
			public var _offline: UIColor?
			open func offlineProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _offline { return override }
					return UIColor(named: "FluentColors/presenceOffline", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var offline: UIColor {
				get { return self.offlineProperty() }
				set { _offline = newValue }
			}

			//MARK: outOfOffice 
			public var _outOfOffice: UIColor?
			open func outOfOfficeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _outOfOffice { return override }
					return UIColor(named: "FluentColors/presenceOof", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var outOfOffice: UIColor {
				get { return self.outOfOfficeProperty() }
				set { _outOfOffice = newValue }
			}

			//MARK: unknown 
			public var _unknown: UIColor?
			open func unknownProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _unknown { return override }
					return UIColor(named: "FluentColors/presenceUnknown", in: FluentUIFramework.resourceBundle, compatibleWith: nil)!
				}
			public var unknown: UIColor {
				get { return self.unknownProperty() }
				set { _unknown = newValue }
			}
		}


		//MARK: - Stroke
		public var _Stroke: StrokeAppearanceProxy?
		open func StrokeStyle() -> StrokeAppearanceProxy {
			if let override = _Stroke { return override }
				return StrokeAppearanceProxy(proxy: mainProxy)
			}
		public var Stroke: StrokeAppearanceProxy {
			get { return self.StrokeStyle() }
			set { _Stroke = newValue }
		}
		@objc(ColorsStrokeAppearanceProxy) @objcMembers open class StrokeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: brandDisabled 
			public var _brandDisabled: UIColor?
			open func brandDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey88Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandDisabled: UIColor {
				get { return self.brandDisabledProperty() }
				set { _brandDisabled = newValue }
			}

			//MARK: brandHover 
			public var _brandHover: UIColor?
			open func brandHoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandHover { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade10Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade10Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandHover: UIColor {
				get { return self.brandHoverProperty() }
				set { _brandHover = newValue }
			}

			//MARK: brandPressed 
			public var _brandPressed: UIColor?
			open func brandPressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandPressed { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade30Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade30Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandPressed: UIColor {
				get { return self.brandPressedProperty() }
				set { _brandPressed = newValue }
			}

			//MARK: brandRest 
			public var _brandRest: UIColor?
			open func brandRestProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandRest { return override }
					return UIColor(light: mainProxy().Colors.Brand.primaryProperty(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.primaryProperty(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandRest: UIColor {
				get { return self.brandRestProperty() }
				set { _brandRest = newValue }
			}

			//MARK: brandSelected 
			public var _brandSelected: UIColor?
			open func brandSelectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _brandSelected { return override }
					return UIColor(light: mainProxy().Colors.Brand.shade20Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Brand.shade20Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var brandSelected: UIColor {
				get { return self.brandSelectedProperty() }
				set { _brandSelected = newValue }
			}

			//MARK: neutral1 
			public var _neutral1: UIColor?
			open func neutral1Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral1 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey94Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey24Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkElevated: mainProxy().Colors.Neutral.grey32Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral1: UIColor {
				get { return self.neutral1Property() }
				set { _neutral1 = newValue }
			}

			//MARK: neutral2 
			public var _neutral2: UIColor?
			open func neutral2Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral2 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey88Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey32Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkElevated: mainProxy().Colors.Neutral.grey36Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral2: UIColor {
				get { return self.neutral2Property() }
				set { _neutral2 = newValue }
			}

			//MARK: neutral3 
			public var _neutral3: UIColor?
			open func neutral3Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutral3 { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey82Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey40Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkElevated: mainProxy().Colors.Neutral.grey52Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutral3: UIColor {
				get { return self.neutral3Property() }
				set { _neutral3 = newValue }
			}

			//MARK: neutralAccessible 
			public var _neutralAccessible: UIColor?
			open func neutralAccessibleProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutralAccessible { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey38Property(traitCollection), lightHighContrast: mainProxy().Colors.Neutral.grey14Property(traitCollection), lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkHighContrast: mainProxy().Colors.Neutral.grey84Property(traitCollection), darkElevated: mainProxy().Colors.Neutral.grey68Property(traitCollection), darkElevatedHighContrast: nil)
				}
			public var neutralAccessible: UIColor {
				get { return self.neutralAccessibleProperty() }
				set { _neutralAccessible = newValue }
			}

			//MARK: neutralDisabled 
			public var _neutralDisabled: UIColor?
			open func neutralDisabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _neutralDisabled { return override }
					return UIColor(light: mainProxy().Colors.Neutral.grey88Property(traitCollection), lightHighContrast: nil, lightElevated: nil, lightElevatedHighContrast: nil, dark: mainProxy().Colors.Neutral.grey32Property(traitCollection), darkHighContrast: nil, darkElevated: nil, darkElevatedHighContrast: nil)
				}
			public var neutralDisabled: UIColor {
				get { return self.neutralDisabledProperty() }
				set { _neutralDisabled = newValue }
			}
		}

	}
	//MARK: - GhostButtonTokens
	public var _GhostButtonTokens: GhostButtonTokensAppearanceProxy?
	open func GhostButtonTokensStyle() -> GhostButtonTokensAppearanceProxy {
		if let override = _GhostButtonTokens { return override }
			return GhostButtonTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var GhostButtonTokens: GhostButtonTokensAppearanceProxy {
		get { return self.GhostButtonTokensStyle() }
		set { _GhostButtonTokens = newValue }
	}
	@objc(GhostButtonTokensAppearanceProxy) @objcMembers open class GhostButtonTokensAppearanceProxy: MSFButtonTokensAppearanceProxy {

		//MARK: - GhostButtonTokensborderColor
		override open func borderColorStyle() -> MSFButtonTokensAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return GhostButtonTokensborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(GhostButtonTokensBorderColorAppearanceProxy) @objcMembers open class GhostButtonTokensborderColorAppearanceProxy: MSFButtonTokensAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}

			//MARK: pressed 
			override open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}

			//MARK: rest 
			override open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}

			//MARK: selected 
			override open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Brand.shade10Property(traitCollection)
				}
		}

	}
	//MARK: - GroupAvatarTokens
	public var _GroupAvatarTokens: GroupAvatarTokensAppearanceProxy?
	open func GroupAvatarTokensStyle() -> GroupAvatarTokensAppearanceProxy {
		if let override = _GroupAvatarTokens { return override }
			return GroupAvatarTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var GroupAvatarTokens: GroupAvatarTokensAppearanceProxy {
		get { return self.GroupAvatarTokensStyle() }
		set { _GroupAvatarTokens = newValue }
	}
	@objc(GroupAvatarTokensAppearanceProxy) @objcMembers open class GroupAvatarTokensAppearanceProxy: AvatarTokensAppearanceProxy {

		//MARK: - GroupAvatarTokensborderRadius
		override open func borderRadiusStyle() -> AvatarTokensAppearanceProxy.borderRadiusAppearanceProxy {
			if let override = _borderRadius { return override }
				return GroupAvatarTokensborderRadiusAppearanceProxy(proxy: mainProxy)
			}
		@objc(GroupAvatarTokensBorderRadiusAppearanceProxy) @objcMembers open class GroupAvatarTokensborderRadiusAppearanceProxy: AvatarTokensAppearanceProxy.borderRadiusAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.radius.largeProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.radius.mediumProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.radius.mediumProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.radius.smallProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.radius.largeProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.radius.xlargeProperty(traitCollection)
				}
		}


		//MARK: - GroupAvatarTokensringInnerGap
		override open func ringInnerGapStyle() -> AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {
			if let override = _ringInnerGap { return override }
				return GroupAvatarTokensringInnerGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(GroupAvatarTokensRingInnerGapAppearanceProxy) @objcMembers open class GroupAvatarTokensringInnerGapAppearanceProxy: AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - GroupAvatarTokensringOuterGap
		override open func ringOuterGapStyle() -> AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {
			if let override = _ringOuterGap { return override }
				return GroupAvatarTokensringOuterGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(GroupAvatarTokensRingOuterGapAppearanceProxy) @objcMembers open class GroupAvatarTokensringOuterGapAppearanceProxy: AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - GroupAvatarTokensringThickness
		override open func ringThicknessStyle() -> AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {
			if let override = _ringThickness { return override }
				return GroupAvatarTokensringThicknessAppearanceProxy(proxy: mainProxy)
			}
		@objc(GroupAvatarTokensRingThicknessAppearanceProxy) @objcMembers open class GroupAvatarTokensringThicknessAppearanceProxy: AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}

	}
	//MARK: - Icon
	public var _Icon: IconAppearanceProxy?
	open func IconStyle() -> IconAppearanceProxy {
		if let override = _Icon { return override }
			return IconAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Icon: IconAppearanceProxy {
		get { return self.IconStyle() }
		set { _Icon = newValue }
	}
	@objc(IconAppearanceProxy) @objcMembers open class IconAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: - size
		public var _size: sizeAppearanceProxy?
		open func sizeStyle() -> sizeAppearanceProxy {
			if let override = _size { return override }
				return sizeAppearanceProxy(proxy: mainProxy)
			}
		public var size: sizeAppearanceProxy {
			get { return self.sizeStyle() }
			set { _size = newValue }
		}
		@objc(IconSizeAppearanceProxy) @objcMembers open class sizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return CGFloat(28.0)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return CGFloat(24.0)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return CGFloat(20.0)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}

			//MARK: xSmall 
			public var _xSmall: CGFloat?
			open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return CGFloat(16.0)
				}
			public var xSmall: CGFloat {
				get { return self.xSmallProperty() }
				set { _xSmall = newValue }
			}

			//MARK: xlarge 
			public var _xlarge: CGFloat?
			open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return CGFloat(36.0)
				}
			public var xlarge: CGFloat {
				get { return self.xlargeProperty() }
				set { _xlarge = newValue }
			}

			//MARK: xxSmall 
			public var _xxSmall: CGFloat?
			open func xxSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxSmall { return override }
					return CGFloat(12.0)
				}
			public var xxSmall: CGFloat {
				get { return self.xxSmallProperty() }
				set { _xxSmall = newValue }
			}

			//MARK: xxlarge 
			public var _xxlarge: CGFloat?
			open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return CGFloat(40.0)
				}
			public var xxlarge: CGFloat {
				get { return self.xxlargeProperty() }
				set { _xxlarge = newValue }
			}

			//MARK: xxxSmall 
			public var _xxxSmall: CGFloat?
			open func xxxSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxxSmall { return override }
					return CGFloat(10.0)
				}
			public var xxxSmall: CGFloat {
				get { return self.xxxSmallProperty() }
				set { _xxxSmall = newValue }
			}

			//MARK: xxxlarge 
			public var _xxxlarge: CGFloat?
			open func xxxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxxlarge { return override }
					return CGFloat(48.0)
				}
			public var xxxlarge: CGFloat {
				get { return self.xxxlargeProperty() }
				set { _xxxlarge = newValue }
			}
		}

	}
	//MARK: - MSFButtonTokens
	public var _MSFButtonTokens: MSFButtonTokensAppearanceProxy?
	open func MSFButtonTokensStyle() -> MSFButtonTokensAppearanceProxy {
		if let override = _MSFButtonTokens { return override }
			return MSFButtonTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var MSFButtonTokens: MSFButtonTokensAppearanceProxy {
		get { return self.MSFButtonTokensStyle() }
		set { _MSFButtonTokens = newValue }
	}
	@objc(MSFButtonTokensAppearanceProxy) @objcMembers open class MSFButtonTokensAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: - backgroundColor
		public var _backgroundColor: backgroundColorAppearanceProxy?
		open func backgroundColorStyle() -> backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return backgroundColorAppearanceProxy(proxy: mainProxy)
			}
		public var backgroundColor: backgroundColorAppearanceProxy {
			get { return self.backgroundColorStyle() }
			set { _backgroundColor = newValue }
		}
		@objc(MSFButtonTokensBackgroundColorAppearanceProxy) @objcMembers open class backgroundColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Neutral.clearProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - borderColor
		public var _borderColor: borderColorAppearanceProxy?
		open func borderColorStyle() -> borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return borderColorAppearanceProxy(proxy: mainProxy)
			}
		public var borderColor: borderColorAppearanceProxy {
			get { return self.borderColorStyle() }
			set { _borderColor = newValue }
		}
		@objc(MSFButtonTokensBorderColorAppearanceProxy) @objcMembers open class borderColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Background.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Background.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Background.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Background.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Background.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - borderRadius
		public var _borderRadius: borderRadiusAppearanceProxy?
		open func borderRadiusStyle() -> borderRadiusAppearanceProxy {
			if let override = _borderRadius { return override }
				return borderRadiusAppearanceProxy(proxy: mainProxy)
			}
		public var borderRadius: borderRadiusAppearanceProxy {
			get { return self.borderRadiusStyle() }
			set { _borderRadius = newValue }
		}
		@objc(MSFButtonTokensBorderRadiusAppearanceProxy) @objcMembers open class borderRadiusAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.radius.xlargeProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.radius.largeProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.radius.mediumProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - borderSize
		public var _borderSize: borderSizeAppearanceProxy?
		open func borderSizeStyle() -> borderSizeAppearanceProxy {
			if let override = _borderSize { return override }
				return borderSizeAppearanceProxy(proxy: mainProxy)
			}
		public var borderSize: borderSizeAppearanceProxy {
			get { return self.borderSizeStyle() }
			set { _borderSize = newValue }
		}
		@objc(MSFButtonTokensBorderSizeAppearanceProxy) @objcMembers open class borderSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - iconColor
		public var _iconColor: iconColorAppearanceProxy?
		open func iconColorStyle() -> iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return iconColorAppearanceProxy(proxy: mainProxy)
			}
		public var iconColor: iconColorAppearanceProxy {
			get { return self.iconColorStyle() }
			set { _iconColor = newValue }
		}
		@objc(MSFButtonTokensIconColorAppearanceProxy) @objcMembers open class iconColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - iconSize
		public var _iconSize: iconSizeAppearanceProxy?
		open func iconSizeStyle() -> iconSizeAppearanceProxy {
			if let override = _iconSize { return override }
				return iconSizeAppearanceProxy(proxy: mainProxy)
			}
		public var iconSize: iconSizeAppearanceProxy {
			get { return self.iconSizeStyle() }
			set { _iconSize = newValue }
		}
		@objc(MSFButtonTokensIconSizeAppearanceProxy) @objcMembers open class iconSizeAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Icon.size.smallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Icon.size.xSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - interspace
		public var _interspace: interspaceAppearanceProxy?
		open func interspaceStyle() -> interspaceAppearanceProxy {
			if let override = _interspace { return override }
				return interspaceAppearanceProxy(proxy: mainProxy)
			}
		public var interspace: interspaceAppearanceProxy {
			get { return self.interspaceStyle() }
			set { _interspace = newValue }
		}
		@objc(MSFButtonTokensInterspaceAppearanceProxy) @objcMembers open class interspaceAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Spacing.xxSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - padding
		public var _padding: paddingAppearanceProxy?
		open func paddingStyle() -> paddingAppearanceProxy {
			if let override = _padding { return override }
				return paddingAppearanceProxy(proxy: mainProxy)
			}
		public var padding: paddingAppearanceProxy {
			get { return self.paddingStyle() }
			set { _padding = newValue }
		}
		@objc(MSFButtonTokensPaddingAppearanceProxy) @objcMembers open class paddingAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: CGFloat?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Spacing.largeProperty(traitCollection)
				}
			public var large: CGFloat {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: CGFloat?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Spacing.smallProperty(traitCollection)
				}
			public var medium: CGFloat {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: CGFloat?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Spacing.xSmallProperty(traitCollection)
				}
			public var small: CGFloat {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}


		//MARK: - textColor
		public var _textColor: textColorAppearanceProxy?
		open func textColorStyle() -> textColorAppearanceProxy {
			if let override = _textColor { return override }
				return textColorAppearanceProxy(proxy: mainProxy)
			}
		public var textColor: textColorAppearanceProxy {
			get { return self.textColorStyle() }
			set { _textColor = newValue }
		}
		@objc(MSFButtonTokensTextColorAppearanceProxy) @objcMembers open class textColorAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: disabled 
			public var _disabled: UIColor?
			open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.brandDisabledProperty(traitCollection)
				}
			public var disabled: UIColor {
				get { return self.disabledProperty() }
				set { _disabled = newValue }
			}

			//MARK: hover 
			public var _hover: UIColor?
			open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.brandHoverProperty(traitCollection)
				}
			public var hover: UIColor {
				get { return self.hoverProperty() }
				set { _hover = newValue }
			}

			//MARK: pressed 
			public var _pressed: UIColor?
			open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.brandPressedProperty(traitCollection)
				}
			public var pressed: UIColor {
				get { return self.pressedProperty() }
				set { _pressed = newValue }
			}

			//MARK: rest 
			public var _rest: UIColor?
			open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.brandRestProperty(traitCollection)
				}
			public var rest: UIColor {
				get { return self.restProperty() }
				set { _rest = newValue }
			}

			//MARK: selected 
			public var _selected: UIColor?
			open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.brandSelectedProperty(traitCollection)
				}
			public var selected: UIColor {
				get { return self.selectedProperty() }
				set { _selected = newValue }
			}
		}


		//MARK: - textFont
		public var _textFont: textFontAppearanceProxy?
		open func textFontStyle() -> textFontAppearanceProxy {
			if let override = _textFont { return override }
				return textFontAppearanceProxy(proxy: mainProxy)
			}
		public var textFont: textFontAppearanceProxy {
			get { return self.textFontStyle() }
			set { _textFont = newValue }
		}
		@objc(MSFButtonTokensTextFontAppearanceProxy) @objcMembers open class textFontAppearanceProxy: NSObject {
			public let mainProxy: () -> FluentUIStyle
			public init(proxy: @escaping () -> FluentUIStyle) {
				self.mainProxy = proxy
			}

			//MARK: large 
			public var _large: UIFont?
			open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _large { return override }
					return mainProxy().Typography.subheadlineProperty(traitCollection)
				}
			public var large: UIFont {
				get { return self.largeProperty() }
				set { _large = newValue }
			}

			//MARK: medium 
			public var _medium: UIFont?
			open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _medium { return override }
					return mainProxy().Typography.subheadlineProperty(traitCollection)
				}
			public var medium: UIFont {
				get { return self.mediumProperty() }
				set { _medium = newValue }
			}

			//MARK: small 
			public var _small: UIFont?
			open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
				if let override = _small { return override }
					return mainProxy().Typography.footnoteProperty(traitCollection)
				}
			public var small: UIFont {
				get { return self.smallProperty() }
				set { _small = newValue }
			}
		}

	}
	//MARK: - NoRingAvatarTokens
	public var _NoRingAvatarTokens: NoRingAvatarTokensAppearanceProxy?
	open func NoRingAvatarTokensStyle() -> NoRingAvatarTokensAppearanceProxy {
		if let override = _NoRingAvatarTokens { return override }
			return NoRingAvatarTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var NoRingAvatarTokens: NoRingAvatarTokensAppearanceProxy {
		get { return self.NoRingAvatarTokensStyle() }
		set { _NoRingAvatarTokens = newValue }
	}
	@objc(NoRingAvatarTokensAppearanceProxy) @objcMembers open class NoRingAvatarTokensAppearanceProxy: AvatarTokensAppearanceProxy {

		//MARK: ringDefaultColor 
		override open func ringDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringDefaultColor { return override }
			return mainProxy().Colors.Neutral.clearProperty(traitCollection)
			}

		//MARK: - NoRingAvatarTokensringInnerGap
		override open func ringInnerGapStyle() -> AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {
			if let override = _ringInnerGap { return override }
				return NoRingAvatarTokensringInnerGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(NoRingAvatarTokensRingInnerGapAppearanceProxy) @objcMembers open class NoRingAvatarTokensringInnerGapAppearanceProxy: AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - NoRingAvatarTokensringOuterGap
		override open func ringOuterGapStyle() -> AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {
			if let override = _ringOuterGap { return override }
				return NoRingAvatarTokensringOuterGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(NoRingAvatarTokensRingOuterGapAppearanceProxy) @objcMembers open class NoRingAvatarTokensringOuterGapAppearanceProxy: AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - NoRingAvatarTokensringThickness
		override open func ringThicknessStyle() -> AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {
			if let override = _ringThickness { return override }
				return NoRingAvatarTokensringThicknessAppearanceProxy(proxy: mainProxy)
			}
		@objc(NoRingAvatarTokensRingThicknessAppearanceProxy) @objcMembers open class NoRingAvatarTokensringThicknessAppearanceProxy: AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}

	}
	//MARK: - Opacity
	public var _Opacity: OpacityAppearanceProxy?
	open func OpacityStyle() -> OpacityAppearanceProxy {
		if let override = _Opacity { return override }
			return OpacityAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Opacity: OpacityAppearanceProxy {
		get { return self.OpacityStyle() }
		set { _Opacity = newValue }
	}
	@objc(OpacityAppearanceProxy) @objcMembers open class OpacityAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: none 
		public var _none: CGFloat?
		open func noneProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _none { return override }
			return CGFloat(1.0)
			}
		public var none: CGFloat {
			get { return self.noneProperty() }
			set { _none = newValue }
		}

		//MARK: opacity16 
		public var _opacity16: CGFloat?
		open func opacity16Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity16 { return override }
			return CGFloat(0.16)
			}
		public var opacity16: CGFloat {
			get { return self.opacity16Property() }
			set { _opacity16 = newValue }
		}

		//MARK: opacity24 
		public var _opacity24: CGFloat?
		open func opacity24Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity24 { return override }
			return CGFloat(0.24)
			}
		public var opacity24: CGFloat {
			get { return self.opacity24Property() }
			set { _opacity24 = newValue }
		}

		//MARK: opacity32 
		public var _opacity32: CGFloat?
		open func opacity32Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity32 { return override }
			return CGFloat(0.32)
			}
		public var opacity32: CGFloat {
			get { return self.opacity32Property() }
			set { _opacity32 = newValue }
		}

		//MARK: opacity64 
		public var _opacity64: CGFloat?
		open func opacity64Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity64 { return override }
			return CGFloat(0.64)
			}
		public var opacity64: CGFloat {
			get { return self.opacity64Property() }
			set { _opacity64 = newValue }
		}

		//MARK: opacity72 
		public var _opacity72: CGFloat?
		open func opacity72Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity72 { return override }
			return CGFloat(0.72)
			}
		public var opacity72: CGFloat {
			get { return self.opacity72Property() }
			set { _opacity72 = newValue }
		}

		//MARK: opacity8 
		public var _opacity8: CGFloat?
		open func opacity8Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity8 { return override }
			return CGFloat(0.8)
			}
		public var opacity8: CGFloat {
			get { return self.opacity8Property() }
			set { _opacity8 = newValue }
		}

		//MARK: opacity88 
		public var _opacity88: CGFloat?
		open func opacity88Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity88 { return override }
			return CGFloat(0.88)
			}
		public var opacity88: CGFloat {
			get { return self.opacity88Property() }
			set { _opacity88 = newValue }
		}

		//MARK: opacity96 
		public var _opacity96: CGFloat?
		open func opacity96Property(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _opacity96 { return override }
			return CGFloat(0.96)
			}
		public var opacity96: CGFloat {
			get { return self.opacity96Property() }
			set { _opacity96 = newValue }
		}
	}
	//MARK: - OverflowAvatarTokens
	public var _OverflowAvatarTokens: OverflowAvatarTokensAppearanceProxy?
	open func OverflowAvatarTokensStyle() -> OverflowAvatarTokensAppearanceProxy {
		if let override = _OverflowAvatarTokens { return override }
			return OverflowAvatarTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var OverflowAvatarTokens: OverflowAvatarTokensAppearanceProxy {
		get { return self.OverflowAvatarTokensStyle() }
		set { _OverflowAvatarTokens = newValue }
	}
	@objc(OverflowAvatarTokensAppearanceProxy) @objcMembers open class OverflowAvatarTokensAppearanceProxy: AvatarTokensAppearanceProxy {

		//MARK: backgroundDefaultColor 
		override open func backgroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundDefaultColor { return override }
			return mainProxy().Colors.Background.neutral4Property(traitCollection)
			}

		//MARK: foregroundDefaultColor 
		override open func foregroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundDefaultColor { return override }
			return mainProxy().Colors.Foreground.neutral3Property(traitCollection)
			}

		//MARK: ringDefaultColor 
		override open func ringDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringDefaultColor { return override }
			return mainProxy().Colors.Neutral.clearProperty(traitCollection)
			}

		//MARK: - OverflowAvatarTokensringInnerGap
		override open func ringInnerGapStyle() -> AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {
			if let override = _ringInnerGap { return override }
				return OverflowAvatarTokensringInnerGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(OverflowAvatarTokensRingInnerGapAppearanceProxy) @objcMembers open class OverflowAvatarTokensringInnerGapAppearanceProxy: AvatarTokensAppearanceProxy.ringInnerGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - OverflowAvatarTokensringOuterGap
		override open func ringOuterGapStyle() -> AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {
			if let override = _ringOuterGap { return override }
				return OverflowAvatarTokensringOuterGapAppearanceProxy(proxy: mainProxy)
			}
		@objc(OverflowAvatarTokensRingOuterGapAppearanceProxy) @objcMembers open class OverflowAvatarTokensringOuterGapAppearanceProxy: AvatarTokensAppearanceProxy.ringOuterGapAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}


		//MARK: - OverflowAvatarTokensringThickness
		override open func ringThicknessStyle() -> AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {
			if let override = _ringThickness { return override }
				return OverflowAvatarTokensringThicknessAppearanceProxy(proxy: mainProxy)
			}
		@objc(OverflowAvatarTokensRingThicknessAppearanceProxy) @objcMembers open class OverflowAvatarTokensringThicknessAppearanceProxy: AvatarTokensAppearanceProxy.ringThicknessAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xSmall 
			override open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xSmall { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xlarge 
			override open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}

			//MARK: xxlarge 
			override open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _xxlarge { return override }
					return mainProxy().Border.size.noneProperty(traitCollection)
				}
		}

	}
	//MARK: - PrimaryButtonTokens
	public var _PrimaryButtonTokens: PrimaryButtonTokensAppearanceProxy?
	open func PrimaryButtonTokensStyle() -> PrimaryButtonTokensAppearanceProxy {
		if let override = _PrimaryButtonTokens { return override }
			return PrimaryButtonTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var PrimaryButtonTokens: PrimaryButtonTokensAppearanceProxy {
		get { return self.PrimaryButtonTokensStyle() }
		set { _PrimaryButtonTokens = newValue }
	}
	@objc(PrimaryButtonTokensAppearanceProxy) @objcMembers open class PrimaryButtonTokensAppearanceProxy: MSFButtonTokensAppearanceProxy {

		//MARK: - PrimaryButtonTokensbackgroundColor
		override open func backgroundColorStyle() -> MSFButtonTokensAppearanceProxy.backgroundColorAppearanceProxy {
			if let override = _backgroundColor { return override }
				return PrimaryButtonTokensbackgroundColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryButtonTokensBackgroundColorAppearanceProxy) @objcMembers open class PrimaryButtonTokensbackgroundColorAppearanceProxy: MSFButtonTokensAppearanceProxy.backgroundColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Background.brandDisabledProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Background.brandHoverProperty(traitCollection)
				}

			//MARK: pressed 
			override open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Background.brandPressedProperty(traitCollection)
				}

			//MARK: rest 
			override open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Background.brandRestProperty(traitCollection)
				}

			//MARK: selected 
			override open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Background.brandSelectedProperty(traitCollection)
				}
		}


		//MARK: - PrimaryButtonTokensiconColor
		override open func iconColorStyle() -> MSFButtonTokensAppearanceProxy.iconColorAppearanceProxy {
			if let override = _iconColor { return override }
				return PrimaryButtonTokensiconColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryButtonTokensIconColorAppearanceProxy) @objcMembers open class PrimaryButtonTokensiconColorAppearanceProxy: MSFButtonTokensAppearanceProxy.iconColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: pressed 
			override open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: rest 
			override open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: selected 
			override open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}
		}


		//MARK: - PrimaryButtonTokenstextColor
		override open func textColorStyle() -> MSFButtonTokensAppearanceProxy.textColorAppearanceProxy {
			if let override = _textColor { return override }
				return PrimaryButtonTokenstextColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(PrimaryButtonTokensTextColorAppearanceProxy) @objcMembers open class PrimaryButtonTokenstextColorAppearanceProxy: MSFButtonTokensAppearanceProxy.textColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: pressed 
			override open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: rest 
			override open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}

			//MARK: selected 
			override open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Foreground.neutralInvertedProperty(traitCollection)
				}
		}

	}
	//MARK: - SecondaryButtonTokens
	public var _SecondaryButtonTokens: SecondaryButtonTokensAppearanceProxy?
	open func SecondaryButtonTokensStyle() -> SecondaryButtonTokensAppearanceProxy {
		if let override = _SecondaryButtonTokens { return override }
			return SecondaryButtonTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var SecondaryButtonTokens: SecondaryButtonTokensAppearanceProxy {
		get { return self.SecondaryButtonTokensStyle() }
		set { _SecondaryButtonTokens = newValue }
	}
	@objc(SecondaryButtonTokensAppearanceProxy) @objcMembers open class SecondaryButtonTokensAppearanceProxy: MSFButtonTokensAppearanceProxy {

		//MARK: - SecondaryButtonTokensborderColor
		override open func borderColorStyle() -> MSFButtonTokensAppearanceProxy.borderColorAppearanceProxy {
			if let override = _borderColor { return override }
				return SecondaryButtonTokensborderColorAppearanceProxy(proxy: mainProxy)
			}
		@objc(SecondaryButtonTokensBorderColorAppearanceProxy) @objcMembers open class SecondaryButtonTokensborderColorAppearanceProxy: MSFButtonTokensAppearanceProxy.borderColorAppearanceProxy {

			//MARK: disabled 
			override open func disabledProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _disabled { return override }
					return mainProxy().Colors.Stroke.brandDisabledProperty(traitCollection)
				}

			//MARK: hover 
			override open func hoverProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _hover { return override }
					return mainProxy().Colors.Stroke.brandHoverProperty(traitCollection)
				}

			//MARK: pressed 
			override open func pressedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _pressed { return override }
					return mainProxy().Colors.Stroke.brandPressedProperty(traitCollection)
				}

			//MARK: rest 
			override open func restProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _rest { return override }
					return mainProxy().Colors.Stroke.brandRestProperty(traitCollection)
				}

			//MARK: selected 
			override open func selectedProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
				if let override = _selected { return override }
					return mainProxy().Colors.Stroke.brandSelectedProperty(traitCollection)
				}
		}


		//MARK: - SecondaryButtonTokensborderSize
		override open func borderSizeStyle() -> MSFButtonTokensAppearanceProxy.borderSizeAppearanceProxy {
			if let override = _borderSize { return override }
				return SecondaryButtonTokensborderSizeAppearanceProxy(proxy: mainProxy)
			}
		@objc(SecondaryButtonTokensBorderSizeAppearanceProxy) @objcMembers open class SecondaryButtonTokensborderSizeAppearanceProxy: MSFButtonTokensAppearanceProxy.borderSizeAppearanceProxy {

			//MARK: large 
			override open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _large { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}

			//MARK: medium 
			override open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _medium { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}

			//MARK: small 
			override open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
				if let override = _small { return override }
					return mainProxy().Border.size.thinProperty(traitCollection)
				}
		}

	}
	//MARK: - Spacing
	public var _Spacing: SpacingAppearanceProxy?
	open func SpacingStyle() -> SpacingAppearanceProxy {
		if let override = _Spacing { return override }
			return SpacingAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Spacing: SpacingAppearanceProxy {
		get { return self.SpacingStyle() }
		set { _Spacing = newValue }
	}
	@objc(SpacingAppearanceProxy) @objcMembers open class SpacingAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: large 
		public var _large: CGFloat?
		open func largeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _large { return override }
			return CGFloat(20.0)
			}
		public var large: CGFloat {
			get { return self.largeProperty() }
			set { _large = newValue }
		}

		//MARK: medium 
		public var _medium: CGFloat?
		open func mediumProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _medium { return override }
			return CGFloat(16.0)
			}
		public var medium: CGFloat {
			get { return self.mediumProperty() }
			set { _medium = newValue }
		}

		//MARK: none 
		public var _none: CGFloat?
		open func noneProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _none { return override }
			return CGFloat(0.0)
			}
		public var none: CGFloat {
			get { return self.noneProperty() }
			set { _none = newValue }
		}

		//MARK: small 
		public var _small: CGFloat?
		open func smallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _small { return override }
			return CGFloat(12.0)
			}
		public var small: CGFloat {
			get { return self.smallProperty() }
			set { _small = newValue }
		}

		//MARK: xSmall 
		public var _xSmall: CGFloat?
		open func xSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xSmall { return override }
			return CGFloat(8.0)
			}
		public var xSmall: CGFloat {
			get { return self.xSmallProperty() }
			set { _xSmall = newValue }
		}

		//MARK: xlarge 
		public var _xlarge: CGFloat?
		open func xlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xlarge { return override }
			return CGFloat(24.0)
			}
		public var xlarge: CGFloat {
			get { return self.xlargeProperty() }
			set { _xlarge = newValue }
		}

		//MARK: xxSmall 
		public var _xxSmall: CGFloat?
		open func xxSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xxSmall { return override }
			return CGFloat(4.0)
			}
		public var xxSmall: CGFloat {
			get { return self.xxSmallProperty() }
			set { _xxSmall = newValue }
		}

		//MARK: xxlarge 
		public var _xxlarge: CGFloat?
		open func xxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xxlarge { return override }
			return CGFloat(36.0)
			}
		public var xxlarge: CGFloat {
			get { return self.xxlargeProperty() }
			set { _xxlarge = newValue }
		}

		//MARK: xxxSmall 
		public var _xxxSmall: CGFloat?
		open func xxxSmallProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xxxSmall { return override }
			return CGFloat(2.0)
			}
		public var xxxSmall: CGFloat {
			get { return self.xxxSmallProperty() }
			set { _xxxSmall = newValue }
		}

		//MARK: xxxlarge 
		public var _xxxlarge: CGFloat?
		open func xxxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xxxlarge { return override }
			return CGFloat(48.0)
			}
		public var xxxlarge: CGFloat {
			get { return self.xxxlargeProperty() }
			set { _xxxlarge = newValue }
		}

		//MARK: xxxxlarge 
		public var _xxxxlarge: CGFloat?
		open func xxxxlargeProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> CGFloat {
			if let override = _xxxxlarge { return override }
			return CGFloat(72.0)
			}
		public var xxxxlarge: CGFloat {
			get { return self.xxxxlargeProperty() }
			set { _xxxxlarge = newValue }
		}
	}
	//MARK: - Typography
	public var _Typography: TypographyAppearanceProxy?
	open func TypographyStyle() -> TypographyAppearanceProxy {
		if let override = _Typography { return override }
			return TypographyAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var Typography: TypographyAppearanceProxy {
		get { return self.TypographyStyle() }
		set { _Typography = newValue }
	}
	@objc(TypographyAppearanceProxy) @objcMembers open class TypographyAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}

		//MARK: footnote 
		public var _footnote: UIFont?
		open func footnoteProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _footnote { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.footnote, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
		public var footnote: UIFont {
			get { return self.footnoteProperty() }
			set { _footnote = newValue }
		}

		//MARK: subheadline 
		public var _subheadline: UIFont?
		open func subheadlineProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIFont {
			if let override = _subheadline { return override }
			return UIFont.font(name: nil, size: nil, textStyle: S.FontTextStyle.subheadline, weight: nil, traits: [], traitCollection: traitCollection, isScalable: true)
			}
		public var subheadline: UIFont {
			get { return self.subheadlineProperty() }
			set { _subheadline = newValue }
		}
	}
	//MARK: - UnauthenticatedAvatarTokens
	public var _UnauthenticatedAvatarTokens: UnauthenticatedAvatarTokensAppearanceProxy?
	open func UnauthenticatedAvatarTokensStyle() -> UnauthenticatedAvatarTokensAppearanceProxy {
		if let override = _UnauthenticatedAvatarTokens { return override }
			return UnauthenticatedAvatarTokensAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var UnauthenticatedAvatarTokens: UnauthenticatedAvatarTokensAppearanceProxy {
		get { return self.UnauthenticatedAvatarTokensStyle() }
		set { _UnauthenticatedAvatarTokens = newValue }
	}
	@objc(UnauthenticatedAvatarTokensAppearanceProxy) @objcMembers open class UnauthenticatedAvatarTokensAppearanceProxy: AvatarTokensAppearanceProxy {

		//MARK: backgroundDefaultColor 
		override open func backgroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _backgroundDefaultColor { return override }
			return mainProxy().Colors.Background.neutral4Property(traitCollection)
			}

		//MARK: foregroundDefaultColor 
		override open func foregroundDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _foregroundDefaultColor { return override }
			return mainProxy().Colors.Foreground.neutral3Property(traitCollection)
			}

		//MARK: ringDefaultColor 
		override open func ringDefaultColorProperty(_ traitCollection: UITraitCollection? = UIScreen.main.traitCollection) -> UIColor {
			if let override = _ringDefaultColor { return override }
			return mainProxy().Colors.Background.neutralDisabledProperty(traitCollection)
			}
	}
	//MARK: - __TextStyle
	public var ___TextStyle: __TextStyleAppearanceProxy?
	open func __TextStyleStyle() -> __TextStyleAppearanceProxy {
		if let override = ___TextStyle { return override }
			return __TextStyleAppearanceProxy(proxy: { return FluentUIStyle.shared() })
		}
	public var __TextStyle: __TextStyleAppearanceProxy {
		get { return self.__TextStyleStyle() }
		set { ___TextStyle = newValue }
	}
	@objc(__TextStyleAppearanceProxy) @objcMembers open class __TextStyleAppearanceProxy: NSObject {
		public let mainProxy: () -> FluentUIStyle
		public init(proxy: @escaping () -> FluentUIStyle) {
			self.mainProxy = proxy
		}
	}

}
fileprivate var __ApperanceProxyHandle: UInt8 = 0
fileprivate var __ThemeAwareHandle: UInt8 = 0
fileprivate var __ObservingDidChangeThemeHandle: UInt8 = 0

extension AvatarTokens: AppearaceProxyComponent {

	public typealias ApperanceProxyType = FluentUIStyle.AvatarTokensAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("Stardust") == false {
					return proxy
				}

				if proxy is FluentUIStyle.GroupAvatarTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).GroupAvatarTokens
				} else if proxy is FluentUIStyle.NoRingAvatarTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).NoRingAvatarTokens
				} else if proxy is FluentUIStyle.OverflowAvatarTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).OverflowAvatarTokens
				} else if proxy is FluentUIStyle.UnauthenticatedAvatarTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).UnauthenticatedAvatarTokens
				}
				return proxy
			}

			return StylesheetManager.stylesheet(FluentUIStyle.shared()).AvatarTokens
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}

extension MSFButtonTokens: AppearaceProxyComponent {

	public typealias ApperanceProxyType = FluentUIStyle.MSFButtonTokensAppearanceProxy
	public var appearanceProxy: ApperanceProxyType {
		get {
			if let proxy = objc_getAssociatedObject(self, &__ApperanceProxyHandle) as? ApperanceProxyType {
				if !themeAware { return proxy }

				if let proxyString = Optional(String(reflecting: type(of: proxy))), proxyString.hasPrefix("Stardust") == false {
					return proxy
				}

				if proxy is FluentUIStyle.GhostButtonTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).GhostButtonTokens
				} else if proxy is FluentUIStyle.PrimaryButtonTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).PrimaryButtonTokens
				} else if proxy is FluentUIStyle.SecondaryButtonTokensAppearanceProxy {
					return StylesheetManager.stylesheet(FluentUIStyle.shared()).SecondaryButtonTokens
				}
				return proxy
			}

			return StylesheetManager.stylesheet(FluentUIStyle.shared()).MSFButtonTokens
		}
		set {
			objc_setAssociatedObject(self, &__ApperanceProxyHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			didChangeAppearanceProxy()
		}
	}

	public var themeAware: Bool {
		get {
			guard let proxy = objc_getAssociatedObject(self, &__ThemeAwareHandle) as? Bool else { return true }
			return proxy
		}
		set {
			objc_setAssociatedObject(self, &__ThemeAwareHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
			isObservingDidChangeTheme = newValue
		}
	}

	fileprivate var isObservingDidChangeTheme: Bool {
		get {
			guard let observing = objc_getAssociatedObject(self, &__ObservingDidChangeThemeHandle) as? Bool else { return false }
			return observing
		}
		set {
			if newValue == isObservingDidChangeTheme { return }
			if newValue {
				NotificationCenter.default.addObserver(self, selector: #selector(didChangeAppearanceProxy), name: Notification.Name.didChangeTheme, object: nil)
			} else {
				NotificationCenter.default.removeObserver(self, name: Notification.Name.didChangeTheme, object: nil)
			}
			objc_setAssociatedObject(self, &__ObservingDidChangeThemeHandle, newValue, .OBJC_ASSOCIATION_RETAIN_NONATOMIC)
		}
	}
}
